{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CardFilterApp","file","setFile","useState","data","setData","filteredData","setFilteredData","displayData","setDisplayData","loading","setLoading","copyBatch","setCopyBatch","singleCopyIndex","setSingleCopyIndex","copiedAll","setCopiedAll","singleCopiedAll","setSingleCopiedAll","prefix","setPrefix","isDarkTheme","setIsDarkTheme","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","sortField","setSortField","sortDirection","setSortDirection","csvUrl","setCsvUrl","inputMethod","setInputMethod","urlError","setUrlError","csvText","setCsvText","filters","setFilters","codes","series","numberFrom","numberTo","wishlistsFrom","wishlistsTo","editions","morphed","trimmed","frame","hasDyeName","tag","noneTag","blacklistSeries","blacklistCharacter","blacklistTag","excludeFrame","excludeMorphed","excludeTrimmed","excludeDyeName","notFoundCodes","setNotFoundCodes","totalPages","Math","ceil","length","handleSort","field","useEffect","document","title","savedTheme","localStorage","getItem","applyTheme","dark","body","classList","add","remove","readFileContent","Promise","resolve","reject","reader","FileReader","onload","event","target","result","onerror","error","readAsText","applyFilters","results","trim","searchCodes","toLowerCase","split","map","code","filter","foundCodes","notFound","codeResults","forEach","searchCode","matchingCards","card","push","includedSeries","s","cardSeries","some","includes","parseInt","number","wishlists","edition","blacklistedSeries","blacklistedCharacters","c","cardCharacter","character","blacklistedTags","t","cardTag","handleFilterChange","e","name","value","type","checked","_objectSpread","[object Object]","resetFilters","React","createElement","className","onChange","toggleTheme","newTheme","setItem","id","htmlFor","accept","async","uploadedFile","files","content","Papa","parse","header","complete","console","placeholder","style","flex","onClick","endsWith","proxyServices","concat","encodeURIComponent","lastError","i","urlToFetch","log","response","fetch","ok","Error","status","csvContent","text","errors","warn","message","disabled","rows","handleCsvTextLoad","join","fontSize","marginTop","Set","sort","a","b","key","newEditions","index","indexOf","splice","handleEditionChange","justifyContent","marginBottom","copyCardCodes","totalBatches","startIndex","endIndex","min","cardsToCopy","slice","navigator","clipboard","writeText","alert","newDisplayData","copiedCard","getCopyButtonText","copyCardCodesOneLine","cardToCopy","downloadCardCodes","batch","blob","Blob","url","URL","createObjectURL","href","download","appendChild","click","removeChild","revokeObjectURL","downloadCardCodesOneLine","overflowX","maxHeight","overflowY","getCurrentPageItems","sortedData","aVal","bVal","localeCompare","getSortedData","color","fontWeight","quality","textAlign","padding","display","alignItems","gap","goToFirstPage","goToPreviousPage","prev","max","isNaN","width","goToNextPage","goToLastPage","marginLeft","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.73f6d41e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport './styles.css';\n\nconst CardFilterApp = () => {\n  const [file, setFile] = useState(null);\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [displayData, setDisplayData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [copyBatch, setCopyBatch] = useState(0);\n  const [singleCopyIndex, setSingleCopyIndex] = useState(0);\n  const [copiedAll, setCopiedAll] = useState(false);\n  const [singleCopiedAll, setSingleCopiedAll] = useState(false);\n  const [prefix, setPrefix] = useState('');\n  const [isDarkTheme, setIsDarkTheme] = useState(true); // Default to dark theme\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10); // Default 10 items per page\n  const [sortField, setSortField] = useState(null);\n  const [sortDirection, setSortDirection] = useState('asc');\n  const [csvUrl, setCsvUrl] = useState('');\n  const [inputMethod, setInputMethod] = useState('file'); // 'file', 'url', or 'paste'\n  const [urlError, setUrlError] = useState('');\n  const [csvText, setCsvText] = useState('');\n  const [filters, setFilters] = useState({\n    codes: '', // New field for card codes search\n    series: '',\n    numberFrom: '',\n    numberTo: '',\n    wishlistsFrom: '',\n    wishlistsTo: '',\n    editions: [],\n    morphed: false,\n    trimmed: false,\n    frame: false,\n    hasDyeName: false,\n    tag: '',\n    noneTag: false,\n    // Blacklist filters\n    blacklistSeries: '',\n    blacklistCharacter: '',\n    blacklistTag: '',\n    excludeFrame: false,\n    excludeMorphed: false,\n    excludeTrimmed: false,\n    excludeDyeName: false\n  });\n  const [notFoundCodes, setNotFoundCodes] = useState([]);\n  \n  // Calculate the total number of pages\n  const totalPages = Math.ceil(displayData.length / itemsPerPage);\n  \n  // Sort function\n  const handleSort = (field) => {\n    // If clicking the same field, toggle direction or reset\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else {\n        // Reset sorting\n        setSortField(null);\n        setSortDirection('asc');\n      }\n    } else {\n      // New field, start with ascending\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n  \n  // Apply sorting to data\n  const getSortedData = (data) => {\n    if (!sortField) return data;\n    \n    const sortedData = [...data];\n    \n    sortedData.sort((a, b) => {\n      // Handle numeric fields\n      if (['number', 'wishlists', 'edition', 'worker.effort'].includes(sortField)) {\n        const aVal = parseInt(a[sortField]) || 0;\n        const bVal = parseInt(b[sortField]) || 0;\n        \n        return sortDirection === 'asc' ? aVal - bVal : bVal - aVal;\n      }\n      \n      // Handle string fields\n      const aVal = a[sortField] || '';\n      const bVal = b[sortField] || '';\n      \n      if (sortDirection === 'asc') {\n        return aVal.localeCompare(bVal);\n      } else {\n        return bVal.localeCompare(aVal);\n      }\n    });\n    \n    return sortedData;\n  };\n  \n  // Get current page items\n  const getCurrentPageItems = () => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    const sortedData = getSortedData(displayData);\n    return sortedData.slice(startIndex, endIndex);\n  };\n  \n  // Pagination controls\n  const goToFirstPage = () => setCurrentPage(1);\n  const goToPreviousPage = () => setCurrentPage(prev => Math.max(prev - 1, 1));\n  const goToNextPage = () => setCurrentPage(prev => Math.min(prev + 1, totalPages));\n  const goToLastPage = () => setCurrentPage(totalPages);\n  \n  // Handle direct page input\n  const handlePageInput = (e) => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value >= 1 && value <= totalPages) {\n      setCurrentPage(value);\n    }\n  };\n  \n  // Handle items per page change\n  const handleItemsPerPageChange = (e) => {\n    const value = parseInt(e.target.value);\n    setItemsPerPage(value);\n    setCurrentPage(1); // Reset to first page when changing items per page\n  };\n  \n  // Set document title\n  useEffect(() => {\n    document.title = \"Karuta Cards Tool\";\n  }, []);\n  \n  // Theme toggle effect\n  useEffect(() => {\n    // Check if theme preference exists in localStorage\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setIsDarkTheme(savedTheme === 'dark');\n    }\n    \n    // Apply theme class to document\n    applyTheme(savedTheme === 'dark' || (savedTheme === null && isDarkTheme));\n  }, []);\n  \n  // Function to apply the theme\n  const applyTheme = (dark) => {\n    if (dark) {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    }\n  };\n  \n  // Function to toggle theme\n  const toggleTheme = () => {\n    const newTheme = !isDarkTheme;\n    setIsDarkTheme(newTheme);\n    applyTheme(newTheme);\n    localStorage.setItem('theme', newTheme ? 'dark' : 'light');\n  };\n  \n  // Handle file upload\n  const handleFileUpload = async (event) => {\n    const uploadedFile = event.target.files[0];\n    setFile(uploadedFile);\n    \n    if (uploadedFile) {\n      setLoading(true);\n      setUrlError('');\n      const content = await readFileContent(uploadedFile);\n      \n      Papa.parse(content, {\n        header: true,\n        complete: (results) => {\n          setData(results.data);\n          setFilteredData(results.data);\n          setDisplayData(results.data);\n          setLoading(false);\n        },\n        error: (error) => {\n          console.error('Error parsing CSV:', error);\n          setLoading(false);\n        }\n      });\n    }\n  };\n  \n  // Handle URL input\n  const handleUrlLoad = async () => {\n    if (!csvUrl.trim()) {\n      setUrlError('Please enter a URL');\n      return;\n    }\n    \n    // Check if URL ends with .csv\n    if (!csvUrl.toLowerCase().endsWith('.csv')) {\n      setUrlError('URL must point to a .csv file');\n      return;\n    }\n    \n    setLoading(true);\n    setUrlError('');\n    setFile(null);\n    \n    // Array of proxy services to try\n    const proxyServices = [\n      // Direct fetch first\n      null,\n      // Different proxy services\n      `https://api.allorigins.win/raw?url=${encodeURIComponent(csvUrl)}`,\n      `https://cors-anywhere.herokuapp.com/${csvUrl}`,\n      `https://thingproxy.freeboard.io/fetch/${csvUrl}`,\n      `https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(csvUrl)}`\n    ];\n    \n    let lastError = null;\n    \n    for (let i = 0; i < proxyServices.length; i++) {\n      try {\n        const urlToFetch = proxyServices[i] || csvUrl;\n        \n        if (i > 0) {\n          console.log(`Trying proxy ${i}: ${proxyServices[i].split('/')[2]}...`);\n        }\n        \n        const response = await fetch(urlToFetch);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const csvContent = await response.text();\n        \n        // Check if content looks like CSV\n        if (!csvContent || csvContent.trim().length === 0) {\n          throw new Error('Empty file or invalid CSV content');\n        }\n        \n        // Check if it's actually CSV data (not an error page)\n        if (csvContent.includes('<html>') || csvContent.includes('<!DOCTYPE')) {\n          throw new Error('Received HTML instead of CSV data');\n        }\n        \n        Papa.parse(csvContent, {\n          header: true,\n          complete: (results) => {\n            if (results.errors && results.errors.length > 0) {\n              console.warn('CSV parsing warnings:', results.errors);\n            }\n            \n            if (!results.data || results.data.length === 0) {\n              setUrlError('No data found in CSV file');\n              setLoading(false);\n              return;\n            }\n            \n            setData(results.data);\n            setFilteredData(results.data);\n            setDisplayData(results.data);\n            setLoading(false);\n          },\n          error: (error) => {\n            console.error('Error parsing CSV:', error);\n            setUrlError('Error parsing CSV file - please check if the file format is correct');\n            setLoading(false);\n          }\n        });\n        \n        // If we get here, it worked\n        return;\n        \n      } catch (error) {\n        lastError = error;\n        console.log(`Attempt ${i + 1} failed:`, error.message);\n        \n        // Continue to next proxy unless it's the last one\n        if (i < proxyServices.length - 1) {\n          continue;\n        }\n      }\n    }\n    \n    // If we get here, all attempts failed\n    console.error('All attempts failed. Last error:', lastError);\n    \n    if (lastError.message.includes('CORS') || lastError.message.includes('NetworkError') || lastError.message.includes('Failed to fetch')) {\n      setUrlError(`❌ Unable to load CSV from URL due to CORS restrictions.\\n\\n✅ Alternative solutions:\\n1. Right-click the link → \"Save link as\" → download the file\\n2. Use \"Upload File\" option instead\\n3. Copy the CSV data and paste it in a text file, save as .csv`);\n    } else if (lastError.message.includes('Content-Length')) {\n      setUrlError(`❌ Proxy service error (file too large or corrupt).\\n\\n✅ Please try:\\n1. Download the file directly from: ${csvUrl}\\n2. Upload the downloaded file using \"Upload File\" option`);\n    } else {\n      setUrlError(`❌ Error loading CSV: ${lastError.message}\\n\\n✅ Try downloading the file manually and uploading it instead.`);\n    }\n    \n    setLoading(false);\n  };\n  \n  // Handle pasted CSV text\n  const handleCsvTextLoad = () => {\n    if (!csvText.trim()) {\n      setUrlError('Please paste CSV data');\n      return;\n    }\n    \n    setLoading(true);\n    setUrlError('');\n    setFile(null);\n    \n    try {\n      Papa.parse(csvText, {\n        header: true,\n        complete: (results) => {\n          if (results.errors && results.errors.length > 0) {\n            console.warn('CSV parsing warnings:', results.errors);\n          }\n          \n          if (!results.data || results.data.length === 0) {\n            setUrlError('No data found in pasted CSV text');\n            setLoading(false);\n            return;\n          }\n          \n          setData(results.data);\n          setFilteredData(results.data);\n          setDisplayData(results.data);\n          setLoading(false);\n        },\n        error: (error) => {\n          console.error('Error parsing CSV:', error);\n          setUrlError('Error parsing CSV data - please check if the format is correct');\n          setLoading(false);\n        }\n      });\n    } catch (error) {\n      console.error('Error processing CSV text:', error);\n      setUrlError(`Error processing CSV data: ${error.message}`);\n      setLoading(false);\n    }\n  };\n  \n  // Read file content\n  const readFileContent = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = (error) => reject(error);\n      reader.readAsText(file);\n    });\n  };\n  \n  // Initialize empty state - no automatic data loading\n  useEffect(() => {\n    // Only process data if a file has been selected by the user\n    if (file) {\n      const processCSVData = (csvText) => {\n        Papa.parse(csvText, {\n          header: true,\n          complete: (results) => {\n            setData(results.data);\n            setFilteredData(results.data);\n            setDisplayData(results.data);\n          },\n          error: (error) => {\n            console.error('Error parsing CSV:', error);\n          }\n        });\n      };\n      \n      // If needed in the future, process file data here\n    } else {\n      // Reset data states when no file is loaded\n      setData([]);\n      setFilteredData([]);\n      setDisplayData([]);\n    }\n  }, [file]);\n  \n  // Apply filters function\n  const applyFilters = () => {\n    let results = [...data];\n    \n    // Filter by card codes (if specified)\n    if (filters.codes.trim()) {\n      const searchCodes = filters.codes.toLowerCase().split(',').map(code => code.trim()).filter(code => code.length > 0);\n      const foundCodes = [];\n      const notFound = [];\n      \n      // Find cards that match the specified codes\n      const codeResults = [];\n      searchCodes.forEach(searchCode => {\n        const matchingCards = data.filter(card => card.code.toLowerCase() === searchCode);\n        if (matchingCards.length > 0) {\n          codeResults.push(...matchingCards);\n          foundCodes.push(searchCode);\n        } else {\n          notFound.push(searchCode);\n        }\n      });\n      \n      results = codeResults;\n      setNotFoundCodes(notFound);\n    } else {\n      setNotFoundCodes([]);\n    }\n    \n    // If codes filter is active, skip other filters (codes take priority)\n    if (!filters.codes.trim()) {\n      // Filter by series\n      if (filters.series) {\n        // Allow multiple series names separated by commas\n        const includedSeries = filters.series.toLowerCase().split(',').map(s => s.trim());\n        results = results.filter(card => {\n          const cardSeries = card.series.toLowerCase();\n          return includedSeries.some(series => cardSeries.includes(series));\n        });\n      }\n      \n      // Filter by number range\n      if (filters.numberFrom) {\n        results = results.filter(card => \n          parseInt(card.number) >= parseInt(filters.numberFrom)\n        );\n      }\n      \n      if (filters.numberTo) {\n        results = results.filter(card => \n          parseInt(card.number) <= parseInt(filters.numberTo)\n        );\n      }\n      \n      // Filter by wishlists range\n      if (filters.wishlistsFrom) {\n        results = results.filter(card => \n          parseInt(card.wishlists) >= parseInt(filters.wishlistsFrom)\n        );\n      }\n      \n      if (filters.wishlistsTo) {\n        results = results.filter(card => \n          parseInt(card.wishlists) <= parseInt(filters.wishlistsTo)\n        );\n      }\n      \n      // Filter by editions\n      if (filters.editions.length > 0) {\n        results = results.filter(card => \n          filters.editions.includes(card.edition)\n        );\n      }\n      \n      // Filter by morphed\n      if (filters.morphed) {\n        results = results.filter(card => card.morphed === \"Yes\");\n      }\n      \n      // Filter by trimmed\n      if (filters.trimmed) {\n        results = results.filter(card => card.trimmed === \"Yes\");\n      }\n      \n      // Filter by frame\n      if (filters.frame) {\n        results = results.filter(card => card.frame !== \"\");\n      }\n      \n      // Filter by dye.name\n      if (filters.hasDyeName) {\n        results = results.filter(card => card[\"dye.name\"] !== \"\");\n      }\n      \n      // Filter by tag\n      if (filters.tag) {\n        results = results.filter(card => \n          card.tag.toLowerCase().includes(filters.tag.toLowerCase())\n        );\n      }\n      \n      // Filter for cards with no tag\n      if (filters.noneTag) {\n        results = results.filter(card => \n          !card.tag || card.tag.trim() === ''\n        );\n      }\n      \n      // Apply blacklist filters\n      \n      // Blacklist series filter\n      if (filters.blacklistSeries) {\n        // Allow multiple series names separated by commas\n        const blacklistedSeries = filters.blacklistSeries.toLowerCase().split(',').map(s => s.trim());\n        results = results.filter(card => {\n          const cardSeries = card.series.toLowerCase();\n          return !blacklistedSeries.some(series => cardSeries.includes(series));\n        });\n      }\n      \n      // Blacklist character filter\n      if (filters.blacklistCharacter) {\n        // Allow multiple character names separated by commas\n        const blacklistedCharacters = filters.blacklistCharacter.toLowerCase().split(',').map(c => c.trim());\n        results = results.filter(card => {\n          const cardCharacter = card.character.toLowerCase();\n          return !blacklistedCharacters.some(character => cardCharacter.includes(character));\n        });\n      }\n      \n      // Blacklist tag filter\n      if (filters.blacklistTag) {\n        // Allow multiple tags separated by commas\n        const blacklistedTags = filters.blacklistTag.toLowerCase().split(',').map(t => t.trim());\n        results = results.filter(card => {\n          const cardTag = (card.tag || '').toLowerCase();\n          return !blacklistedTags.some(tag => cardTag.includes(tag));\n        });\n      }\n      \n      // Exclude cards with frame\n      if (filters.excludeFrame) {\n        results = results.filter(card => !card.frame || card.frame.trim() === '');\n      }\n      \n      // Exclude morphed cards\n      if (filters.excludeMorphed) {\n        results = results.filter(card => card.morphed !== \"Yes\");\n      }\n      \n      // Exclude trimmed cards\n      if (filters.excludeTrimmed) {\n        results = results.filter(card => card.trimmed !== \"Yes\");\n      }\n      \n      // Exclude cards with dye.name\n      if (filters.excludeDyeName) {\n        results = results.filter(card => !card[\"dye.name\"] || card[\"dye.name\"].trim() === '');\n      }\n    }\n    \n    setFilteredData(results);\n    setDisplayData(results);\n    // Reset pagination when filters change\n    setCurrentPage(1);\n    // Reset copy batch when filters change\n    setCopyBatch(0);\n    setCopiedAll(false);\n  };\n  \n  // Handle filter changes - back to manual filtering\n  const handleFilterChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    \n    setFilters({\n      ...filters,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n  \n  // Handle edition selection - back to manual filtering\n  const handleEditionChange = (edition) => {\n    const newEditions = [...filters.editions];\n    \n    if (newEditions.includes(edition)) {\n      const index = newEditions.indexOf(edition);\n      newEditions.splice(index, 1);\n    } else {\n      newEditions.push(edition);\n    }\n    \n    setFilters({\n      ...filters,\n      editions: newEditions\n    });\n  };\n  \n  // Reset filters\n  const resetFilters = () => {\n    setFilters({\n      codes: '', // Reset codes filter\n      series: '',\n      numberFrom: '',\n      numberTo: '',\n      wishlistsFrom: '',\n      wishlistsTo: '',\n      editions: [],\n      morphed: false,\n      trimmed: false,\n      frame: false,\n      hasDyeName: false,\n      tag: '',\n      noneTag: false,\n      // Reset blacklist filters\n      blacklistSeries: '',\n      blacklistCharacter: '',\n      blacklistTag: '',\n      excludeFrame: false,\n      excludeMorphed: false,\n      excludeTrimmed: false,\n      excludeDyeName: false\n    });\n    \n    // Reset sorting\n    setSortField(null);\n    setSortDirection('asc');\n    \n    // Clear not found codes\n    setNotFoundCodes([]);\n    \n    setFilteredData(data);\n    setDisplayData(data);\n    setCopyBatch(0);\n    setCopiedAll(false);\n    setSingleCopyIndex(0);\n    setSingleCopiedAll(false);\n  };\n  \n  // Copy card codes to clipboard - updated to handle batches and remove copied cards\n  const copyCardCodes = () => {\n    const batchSize = 50;\n    const totalBatches = Math.ceil(filteredData.length / batchSize);\n    \n    // If we've copied all batches, reset to beginning and restore display\n    if (copyBatch >= totalBatches || copiedAll) {\n      setCopyBatch(0);\n      setCopiedAll(false);\n      setDisplayData([...filteredData]);\n      return;\n    }\n    \n    const startIndex = copyBatch * batchSize;\n    const endIndex = Math.min(startIndex + batchSize, filteredData.length);\n    const cardsToCopy = filteredData.slice(startIndex, endIndex);\n    \n    // Add prefix if it exists\n    let codes;\n    if (prefix.trim()) {\n      codes = cardsToCopy.map(card => `${prefix} ${card.code}`).join(', ');\n    } else {\n      codes = cardsToCopy.map(card => card.code).join(', ');\n    }\n    \n    navigator.clipboard.writeText(codes);\n    alert(`Copied codes ${startIndex+1}-${endIndex} of ${filteredData.length}`)\n    \n    // Remove copied cards from display\n    const newDisplayData = displayData.filter(card => \n      !cardsToCopy.some(copiedCard => copiedCard.code === card.code)\n    );\n    \n    setDisplayData(newDisplayData);\n    \n    // Move to next batch\n    setCopyBatch(copyBatch + 1);\n    \n    // If we've copied all, mark as completed\n    if (endIndex >= filteredData.length) {\n      setCopiedAll(true);\n    }\n  };\n\n  // Copy card codes to clipboard (one card at a time)\n  const copyCardCodesOneLine = () => {\n    // If we've copied all cards, reset to beginning and restore display\n    if (filteredData.length === 0 || singleCopyIndex >= filteredData.length || singleCopiedAll) {\n      setSingleCopyIndex(0);\n      setSingleCopiedAll(false);\n      setDisplayData([...filteredData]);\n      return;\n    }\n    \n    // Get the single card to copy\n    const cardToCopy = filteredData[singleCopyIndex];\n    \n    // Add prefix if it exists, for a single code\n    let code;\n    if (prefix.trim()) {\n      code = `${prefix} ${cardToCopy.code}`;\n    } else {\n      code = cardToCopy.code;\n    }\n    \n    navigator.clipboard.writeText(code);\n    alert(`Copied code ${singleCopyIndex+1} of ${filteredData.length}: ${cardToCopy.code}`);\n    \n    // Remove only this copied card from display\n    const newDisplayData = displayData.filter(card => card.code !== cardToCopy.code);\n    setDisplayData(newDisplayData);\n    \n    // Move to next card\n    setSingleCopyIndex(singleCopyIndex + 1);\n    \n    // If we've copied all, mark as completed\n    if (singleCopyIndex + 1 >= filteredData.length) {\n      setSingleCopiedAll(true);\n    }\n  };\n  \n  // Download card codes as text file\n  const downloadCardCodes = () => {\n    const maxCodesPerLine = 50;\n    let content = '';\n    \n    for (let i = 0; i < filteredData.length; i += maxCodesPerLine) {\n      const batch = filteredData.slice(i, i + maxCodesPerLine);\n      \n      // Add prefix if it exists\n      if (prefix.trim()) {\n        content += prefix + ' ' + batch.map(card => card.code).join(', ') + '\\n';\n      } else {\n        content += batch.map(card => card.code).join(', ') + '\\n';\n      }\n    }\n    \n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'card_codes.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // Download card codes as text file (one per line)\n  const downloadCardCodesOneLine = () => {\n    let content = '';\n    \n    // Add prefix if it exists, one code per line\n    if (prefix.trim()) {\n      content = filteredData.map(card => `${prefix} ${card.code}`).join('\\n');\n    } else {\n      content = filteredData.map(card => card.code).join('\\n');\n    }\n    \n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.download = 'card_codes_one_per_line.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  \n  // Get unique editions\n  const getUniqueEditions = () => {\n    if (data.length === 0) return [];\n    \n    const editions = [...new Set(data.map(card => card.edition))];\n    return editions.sort((a, b) => parseInt(a) - parseInt(b));\n  };\n  \n  // Get copy button text\n  const getCopyButtonText = () => {\n    const batchSize = 50;\n    const totalBatches = Math.ceil(filteredData.length / batchSize);\n    \n    if (filteredData.length === 0) {\n      return \"Copy Codes (max 50)\";\n    }\n    \n    // If we've copied all batches or marked as copied all, show that we're starting over\n    if (copyBatch >= totalBatches || copiedAll) {\n      return \"Restore & Start Over\";\n    }\n    \n    const startIndex = copyBatch * batchSize;\n    const endIndex = Math.min(startIndex + batchSize, filteredData.length);\n    \n    return `Copy Codes (${startIndex}/${filteredData.length})`;\n  };\n  \n  // Get single copy button text\n  const getSingleCopyButtonText = () => {\n    if (filteredData.length === 0) {\n      return \"Copy Single Code\";\n    }\n    \n    // If we've copied all cards or marked as single copied all, show that we're starting over\n    if (singleCopyIndex >= filteredData.length || singleCopiedAll) {\n      return \"Restore & Start Over\";\n    }\n    \n    return `Copy Single Code (${singleCopyIndex}/${filteredData.length})`;\n  };\n  \n  return (\n    <div className=\"container\">\n      {/* Theme Toggle Switch */}\n      <div className=\"theme-switch-container\">\n        <span className=\"theme-icon\">☀️</span>\n        <label className=\"theme-switch\">\n          <input \n            type=\"checkbox\" \n            checked={isDarkTheme}\n            onChange={toggleTheme}\n          />\n          <span className=\"slider\"></span>\n        </label>\n        <span className=\"theme-icon\">🌙</span>\n      </div>\n      \n      <h1 className=\"header\">Card Filter Application</h1>\n      \n      {/* File upload */}\n      <div className=\"card\">\n        <h2>Load CSV Data</h2>\n        \n        {/* Input method selection */}\n        <div className=\"form-group\">\n          <label className=\"form-label\">Choose input method:</label>\n          <div className=\"flex gap-4\">\n            <div className=\"checkbox-container\">\n              <input\n                type=\"radio\"\n                id=\"file-method\"\n                name=\"input-method\"\n                checked={inputMethod === 'file'}\n                onChange={() => {\n                  setInputMethod('file');\n                  setCsvUrl('');\n                  setCsvText('');\n                  setUrlError('');\n                }}\n                className=\"checkbox\"\n              />\n              <label htmlFor=\"file-method\" className=\"checkbox-label\">\n                Upload File\n              </label>\n            </div>\n            \n            <div className=\"checkbox-container\">\n              <input\n                type=\"radio\"\n                id=\"url-method\"\n                name=\"input-method\"\n                checked={inputMethod === 'url'}\n                onChange={() => {\n                  setInputMethod('url');\n                  setFile(null);\n                  setCsvText('');\n                }}\n                className=\"checkbox\"\n              />\n              <label htmlFor=\"url-method\" className=\"checkbox-label\">\n                Load from URL\n              </label>\n            </div>\n            \n            <div className=\"checkbox-container\">\n              <input\n                type=\"radio\"\n                id=\"paste-method\"\n                name=\"input-method\"\n                checked={inputMethod === 'paste'}\n                onChange={() => {\n                  setInputMethod('paste');\n                  setFile(null);\n                  setCsvUrl('');\n                  setUrlError('');\n                }}\n                className=\"checkbox\"\n              />\n              <label htmlFor=\"paste-method\" className=\"checkbox-label\">\n                Paste CSV Data\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        {/* File upload section */}\n        {inputMethod === 'file' && (\n          <div className=\"form-group\">\n            <label className=\"form-label\">Select CSV or TXT file:</label>\n            <input \n              type=\"file\" \n              accept=\".csv, .txt\" \n              onChange={handleFileUpload} \n              className=\"form-input\"\n            />\n          </div>\n        )}\n        \n        {/* URL input section */}\n        {inputMethod === 'url' && (\n          <div className=\"form-group\">\n            <label className=\"form-label\">CSV file URL:</label>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"url\"\n                value={csvUrl}\n                onChange={(e) => setCsvUrl(e.target.value)}\n                className=\"form-input\"\n                placeholder=\"https://example.com/file.csv\"\n                style={{flex: 1}}\n              />\n              <button\n                onClick={handleUrlLoad}\n                disabled={loading}\n                className=\"btn btn-primary\"\n              >\n                {loading ? 'Loading...' : 'Load CSV'}\n              </button>\n            </div>\n            <p className=\"text-gray-500 text-sm mt-1\">\n              Enter a direct link to a CSV file. The URL must end with .csv\n            </p>\n            {urlError && (\n              <div className=\"url-error\">\n                <p className=\"text-error\">\n                  {urlError}\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n        \n        {/* Paste CSV section */}\n        {inputMethod === 'paste' && (\n          <div className=\"form-group\">\n            <label className=\"form-label\">Paste CSV data:</label>\n            <textarea\n              value={csvText}\n              onChange={(e) => setCsvText(e.target.value)}\n              className=\"form-input csv-textarea\"\n              placeholder=\"Paste your CSV data here...&#10;Example:&#10;code,number,character,series&#10;abc123,1,Naruto,Naruto&#10;def456,2,Sasuke,Naruto\"\n              rows=\"8\"\n            />\n            <div className=\"flex gap-2 mt-2\">\n              <button\n                onClick={handleCsvTextLoad}\n                disabled={loading}\n                className=\"btn btn-primary\"\n              >\n                {loading ? 'Processing...' : 'Load CSV Data'}\n              </button>\n              <button\n                onClick={() => setCsvText('')}\n                className=\"btn btn-secondary\"\n              >\n                Clear\n              </button>\n            </div>\n            <p className=\"text-gray-500 text-sm mt-1\">\n              Paste CSV data directly. Make sure the first line contains column headers.\n            </p>\n            {urlError && (\n              <div className=\"url-error\">\n                <p className=\"text-error\">\n                  {urlError}\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n        \n        {/* Loading and status messages */}\n        {loading && <p>Loading data...</p>}\n        {!loading && data.length > 0 && (\n          <p className=\"text-success\">Loaded {data.length} records.</p>\n        )}\n        {!loading && data.length === 0 && !file && !csvUrl && !csvText && (\n          <p>No data loaded. Please upload a CSV/TXT file, provide a CSV URL, or paste CSV data.</p>\n        )}\n        \n        <div className=\"form-group\">\n          <label className=\"form-label\">Prefix for card codes:</label>\n          <input\n            type=\"text\"\n            value={prefix}\n            onChange={(e) => setPrefix(e.target.value)}\n            className=\"form-input\"\n            placeholder=\"Enter prefix (e.g. 'kt t1')\"\n          />\n          <p className=\"text-gray-500 text-sm mt-1\">\n            This text will be added before each card code when copying or downloading.\n          </p>\n        </div>\n      </div>\n      \n      {/* Filters card */}\n      <div className=\"card\">\n        <h2>Filters</h2>\n        \n        {/* Include filters section */}\n        <div className=\"filter-section\">\n          <h3 className=\"filter-section-title\">Include Filters</h3>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Search by Card Codes:</label>\n            <input\n              type=\"text\"\n              name=\"codes\"\n              value={filters.codes}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter card codes separated by commas (e.g., vpvh96n, vzgrgsx)\"\n            />\n            <p className=\"text-gray-500 text-sm mt-1\">\n              Search for specific cards by their codes. This will override other filters when used.\n            </p>\n            {notFoundCodes.length > 0 && (\n              <div className=\"not-found-codes\">\n                <p className=\"text-warning\">\n                  <strong>Not found codes:</strong> {notFoundCodes.join(', ')}\n                </p>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Series:</label>\n            <input\n              type=\"text\"\n              name=\"series\"\n              value={filters.series}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter series names (comma-separated)\"\n              disabled={filters.codes.trim() !== ''}\n            />\n            {filters.series && filters.series.includes(',') && !filters.codes.trim() && (\n              <p className=\"text-info\" style={{fontSize: \"0.75rem\", marginTop: \"0.25rem\"}}>\n                Including series containing: {filters.series}\n              </p>\n            )}\n            {filters.codes.trim() && (\n              <p className=\"text-gray-500 text-sm mt-1\">\n                Disabled while using code search\n              </p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Number:</label>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"number\"\n                name=\"numberFrom\"\n                value={filters.numberFrom}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"From\"\n                disabled={filters.codes.trim() !== ''}\n              />\n              <input\n                type=\"number\"\n                name=\"numberTo\"\n                value={filters.numberTo}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"To\"\n                disabled={filters.codes.trim() !== ''}\n              />\n            </div>\n            {filters.codes.trim() && (\n              <p className=\"text-gray-500 text-sm mt-1\">\n                Disabled while using code search\n              </p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Wishlists:</label>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"number\"\n                name=\"wishlistsFrom\"\n                value={filters.wishlistsFrom}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"From\"\n                disabled={filters.codes.trim() !== ''}\n              />\n              <input\n                type=\"number\"\n                name=\"wishlistsTo\"\n                value={filters.wishlistsTo}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"To\"\n                disabled={filters.codes.trim() !== ''}\n              />\n            </div>\n            {filters.codes.trim() && (\n              <p className=\"text-gray-500 text-sm mt-1\">\n                Disabled while using code search\n              </p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Tag:</label>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                name=\"tag\"\n                value={filters.tag}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"Enter tag...\"\n                disabled={filters.noneTag || filters.codes.trim() !== ''}\n              />\n              <button\n                onClick={() => setFilters({...filters, noneTag: !filters.noneTag, tag: filters.noneTag ? filters.tag : ''})}\n                className={`btn ${filters.noneTag ? 'btn-primary' : 'btn-secondary'}`}\n                title=\"Show only cards with no tag\"\n                disabled={filters.codes.trim() !== ''}\n              >\n                None Tag\n              </button>\n            </div>\n            {filters.noneTag && !filters.codes.trim() && (\n              <p className=\"text-info\" style={{fontSize: \"0.75rem\", marginTop: \"0.25rem\"}}>\n                Showing only cards with no tag. Tag search is disabled.\n              </p>\n            )}\n            {filters.codes.trim() && (\n              <p className=\"text-gray-500 text-sm mt-1\">\n                Disabled while using code search\n              </p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Editions:</label>\n            <div className=\"flex flex-wrap gap-2\">\n              {getUniqueEditions().map((edition) => (\n                <button\n                  key={edition}\n                  onClick={() => !filters.codes.trim() && handleEditionChange(edition)}\n                  className={`chip ${\n                    filters.editions.includes(edition)\n                      ? 'chip-blue'\n                      : 'chip-gray'\n                  } ${filters.codes.trim() ? 'opacity-50 cursor-not-allowed' : ''}`}\n                  disabled={filters.codes.trim() !== ''}\n                >\n                  {edition}\n                </button>\n              ))}\n            </div>\n            {filters.codes.trim() && (\n              <p className=\"text-gray-500 text-sm mt-1\">\n                Disabled while using code search\n              </p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <div className=\"flex flex-wrap gap-2\">\n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"morphed\"\n                  name=\"morphed\"\n                  checked={filters.morphed}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                  disabled={filters.codes.trim() !== ''}\n                />\n                <label htmlFor=\"morphed\" className={`checkbox-label ${filters.codes.trim() ? 'opacity-50' : ''}`}>\n                  Morphed\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"trimmed\"\n                  name=\"trimmed\"\n                  checked={filters.trimmed}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                  disabled={filters.codes.trim() !== ''}\n                />\n                <label htmlFor=\"trimmed\" className={`checkbox-label ${filters.codes.trim() ? 'opacity-50' : ''}`}>\n                  Trimmed\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"frame\"\n                  name=\"frame\"\n                  checked={filters.frame}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                  disabled={filters.codes.trim() !== ''}\n                />\n                <label htmlFor=\"frame\" className={`checkbox-label ${filters.codes.trim() ? 'opacity-50' : ''}`}>\n                  With Frame\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"hasDyeName\"\n                  name=\"hasDyeName\"\n                  checked={filters.hasDyeName}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                  disabled={filters.codes.trim() !== ''}\n                />\n                <label htmlFor=\"hasDyeName\" className={`checkbox-label ${filters.codes.trim() ? 'opacity-50' : ''}`}>\n                  With dye.name\n                </label>\n              </div>\n            </div>\n            {filters.codes.trim() && (\n              <p className=\"text-gray-500 text-sm mt-1\">\n                Disabled while using code search\n              </p>\n            )}\n          </div>\n          \n          <div className=\"flex gap-2\" style={{marginTop: \"1rem\"}}>\n            <button\n              onClick={applyFilters}\n              className=\"btn btn-primary\"\n            >\n              Apply Filters\n            </button>\n            <button\n              onClick={resetFilters}\n              className=\"btn btn-secondary\"\n            >\n              Reset Filters\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"filter-section-divider\"></div>\n        \n        {/* Exclude filters section */}\n        <div className=\"filter-section\">\n          <h3 className=\"filter-section-title\">Exclude Filters (Blacklist)</h3>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Exclude Series:</label>\n            <input\n              type=\"text\"\n              name=\"blacklistSeries\"\n              value={filters.blacklistSeries}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter series to exclude (comma-separated)\"\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Exclude Characters:</label>\n            <input\n              type=\"text\"\n              name=\"blacklistCharacter\"\n              value={filters.blacklistCharacter}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter characters to exclude (comma-separated)\"\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Exclude Tags:</label>\n            <input\n              type=\"text\"\n              name=\"blacklistTag\"\n              value={filters.blacklistTag}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter tags to exclude (comma-separated)\"\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <div className=\"flex flex-wrap gap-2\">\n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"excludeFrame\"\n                  name=\"excludeFrame\"\n                  checked={filters.excludeFrame}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"excludeFrame\" className=\"checkbox-label\">\n                  Exclude Cards with Frame\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"excludeMorphed\"\n                  name=\"excludeMorphed\"\n                  checked={filters.excludeMorphed}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"excludeMorphed\" className=\"checkbox-label\">\n                  Exclude Morphed Cards\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"excludeTrimmed\"\n                  name=\"excludeTrimmed\"\n                  checked={filters.excludeTrimmed}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"excludeTrimmed\" className=\"checkbox-label\">\n                  Exclude Trimmed Cards\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"excludeDyeName\"\n                  name=\"excludeDyeName\"\n                  checked={filters.excludeDyeName}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"excludeDyeName\" className=\"checkbox-label\">\n                  Exclude Cards with dye.name\n                </label>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2\" style={{marginTop: \"1rem\"}}>\n            <button\n              onClick={applyFilters}\n              className=\"btn btn-primary\"\n            >\n              Apply Filters\n            </button>\n            <button\n              onClick={resetFilters}\n              className=\"btn btn-secondary\"\n            >\n              Reset Filters\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Results section */}\n      <div className=\"card\">\n        <div className=\"flex\" style={{justifyContent: \"space-between\", marginBottom: \"1rem\"}}>\n          <h2>Results {data.length > 0 ? `(${displayData.length}/${filteredData.length})` : \"\"}</h2>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={copyCardCodes}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-success'\n              }`}\n              title=\"Copy up to 50 codes separated by commas\"\n            >\n              {getCopyButtonText()}\n            </button>\n            <button\n              onClick={copyCardCodesOneLine}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-success'\n              }`}\n              title=\"Copy a single code at a time\"\n            >\n              {getSingleCopyButtonText()}\n            </button>\n            <button\n              onClick={downloadCardCodes}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-purple'\n              }`}\n              title=\"Download with up to 50 codes per line\"\n            >\n              Download (50 max)\n            </button>\n            <button\n              onClick={downloadCardCodesOneLine}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-purple'\n              }`}\n              title=\"Download with one code per line\"\n            >\n              Download (1 per line)\n            </button>\n          </div>\n        </div>\n        \n        {/* Results table */}\n        {displayData.length > 0 ? (\n          <div style={{overflowX: \"auto\", maxHeight: \"500px\", overflowY: \"auto\"}}>\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th onClick={() => handleSort('code')} className=\"sortable-header\">\n                    Code {sortField === 'code' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('number')} className=\"sortable-header\">\n                    Number {sortField === 'number' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('edition')} className=\"sortable-header\">\n                    Edition {sortField === 'edition' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('character')} className=\"sortable-header\">\n                    Character {sortField === 'character' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('series')} className=\"sortable-header\">\n                    Series {sortField === 'series' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('quality')} className=\"sortable-header\">\n                    Quality {sortField === 'quality' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('wishlists')} className=\"sortable-header\">\n                    Wishlists {sortField === 'wishlists' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('worker.effort')} className=\"sortable-header\">\n                    Worker Effort {sortField === 'worker.effort' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('frame')} className=\"sortable-header\">\n                    Frame {sortField === 'frame' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('tag')} className=\"sortable-header\">\n                    Tag {sortField === 'tag' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {getCurrentPageItems().map((card, index) => (\n                  <tr key={index}>\n                    <td style={{color: \"#3b82f6\", fontWeight: 500}}>{card.code}</td>\n                    <td>{card.number}</td>\n                    <td>{card.edition}</td>\n                    <td>{card.character}</td>\n                    <td>{card.series}</td>\n                    <td>{card.quality}</td>\n                    <td>{card.wishlists}</td>\n                    <td>{card['worker.effort'] || \"0\"}</td>\n                    <td>{card.frame || \"—\"}</td>\n                    <td>{card.tag}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <p style={{textAlign: \"center\", padding: \"1rem\"}}>\n            {file ? \"No results matching the filter criteria.\" : \"No data loaded. Please upload a file to see results.\"}\n          </p>\n        )}\n        \n        {/* Pagination controls */}\n        {displayData.length > 0 && (\n          <div className=\"pagination-container\" style={{marginTop: \"1rem\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", gap: \"0.75rem\"}}>\n            <button \n              onClick={goToFirstPage} \n              disabled={currentPage === 1}\n              className={`btn ${currentPage === 1 ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"First Page\"\n            >\n              &laquo;\n            </button>\n            <button \n              onClick={goToPreviousPage} \n              disabled={currentPage === 1}\n              className={`btn ${currentPage === 1 ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"Previous Page\"\n            >\n              &lsaquo;\n            </button>\n            \n            <div style={{display: \"flex\", alignItems: \"center\", gap: \"0.5rem\"}}>\n              <span>Page</span>\n              <input \n                type=\"number\" \n                min=\"1\" \n                max={totalPages} \n                value={currentPage}\n                onChange={handlePageInput}\n                style={{width: \"50px\", textAlign: \"center\", padding: \"0.25rem\"}}\n                className=\"form-input\"\n              />\n              <span>of {totalPages}</span>\n            </div>\n            \n            <button \n              onClick={goToNextPage} \n              disabled={currentPage === totalPages}\n              className={`btn ${currentPage === totalPages ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"Next Page\"\n            >\n              &rsaquo;\n            </button>\n            <button \n              onClick={goToLastPage} \n              disabled={currentPage === totalPages}\n              className={`btn ${currentPage === totalPages ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"Last Page\"\n            >\n              &raquo;\n            </button>\n            \n            <div style={{marginLeft: \"1rem\", display: \"flex\", alignItems: \"center\", gap: \"0.5rem\"}}>\n              <span>Show</span>\n              <select \n                value={itemsPerPage} \n                onChange={handleItemsPerPageChange}\n                className=\"form-input\"\n                style={{padding: \"0.25rem\"}}\n              >\n                <option value=\"5\">5</option>\n                <option value=\"10\">10</option>\n                <option value=\"25\">25</option>\n                <option value=\"50\">50</option>\n                <option value=\"100\">100</option>\n              </select>\n              <span>per page</span>\n            </div>\n          </div>\n        )}\n        \n        {filteredData.length !== displayData.length && (\n          <p style={{fontSize: \"0.875rem\", marginTop: \"0.5rem\", color: \"#3b82f6\"}}>\n            Displaying only {displayData.length} of {filteredData.length} records (remaining have already been copied).\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CardFilterApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}