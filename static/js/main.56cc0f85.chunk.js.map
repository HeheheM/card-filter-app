{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CardFilterApp","file","setFile","useState","data","setData","filteredData","setFilteredData","displayData","setDisplayData","loading","setLoading","copyBatch","setCopyBatch","singleCopyIndex","setSingleCopyIndex","copiedAll","setCopiedAll","singleCopiedAll","setSingleCopiedAll","prefix","setPrefix","isDarkTheme","setIsDarkTheme","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","sortField","setSortField","sortDirection","setSortDirection","csvUrl","setCsvUrl","inputMethod","setInputMethod","urlError","setUrlError","filters","setFilters","codes","series","numberFrom","numberTo","wishlistsFrom","wishlistsTo","editions","morphed","trimmed","frame","hasDyeName","tag","noneTag","blacklistSeries","blacklistCharacter","blacklistTag","excludeFrame","excludeMorphed","excludeTrimmed","excludeDyeName","notFoundCodes","setNotFoundCodes","showCodesModal","setShowCodesModal","codesDisplayFormat","setCodesDisplayFormat","totalPages","Math","ceil","length","buildCardImageUrl","character","edition","slug","String","normalize","replace","toLowerCase","ed","concat","handleSort","field","useEffect","document","title","applyTheme","dark","body","classList","add","remove","readFileContent","Promise","resolve","reject","reader","FileReader","onload","event","target","result","onerror","error","readAsText","applyFilters","results","trim","searchCodes","split","map","code","filter","foundCodes","notFound","codeResults","forEach","searchCode","matchingCards","card","push","includedSeries","s","cardSeries","some","includes","parseInt","number","wishlists","blacklistedSeries","blacklistedCharacters","c","cardCharacter","blacklistedTags","t","cardTag","handleFilterChange","e","name","value","type","checked","_objectSpread","[object Object]","resetFilters","generateCodesForDisplay","maxCodesPerLine","content","i","batch","slice","join","React","createElement","className","onChange","toggleTheme","newTheme","id","htmlFor","accept","async","uploadedFile","files","Papa","parse","header","complete","console","placeholder","style","flex","onClick","endsWith","log","proxyUrl","encodeURIComponent","response","fetch","ok","Error","status","csvContent","text","errors","warn","message","disabled","Set","sort","a","b","key","newEditions","index","indexOf","splice","handleEditionChange","copyCardCodes","totalBatches","startIndex","endIndex","min","cardsToCopy","navigator","clipboard","writeText","alert","newDisplayData","copiedCard","getCopyButtonText","copyCardCodesOneLine","cardToCopy","downloadCardCodes","blob","Blob","url","URL","createObjectURL","href","download","appendChild","click","removeChild","revokeObjectURL","downloadCardCodesOneLine","getCurrentPageItems","sortedData","aVal","bVal","localeCompare","getSortedData","src","alt","onError","currentTarget","display","quality","goToFirstPage","goToPreviousPage","prev","max","isNaN","goToNextPage","goToLastPage","stopPropagation","copyCodesFromModal","readOnly","rows","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.56cc0f85.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Papa from 'papaparse';\r\nimport './styles.css';\r\n\r\nconst CardFilterApp = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [data, setData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [displayData, setDisplayData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [copyBatch, setCopyBatch] = useState(0);\r\n  const [singleCopyIndex, setSingleCopyIndex] = useState(0);\r\n  const [copiedAll, setCopiedAll] = useState(false);\r\n  const [singleCopiedAll, setSingleCopiedAll] = useState(false);\r\n  const [prefix, setPrefix] = useState('');\r\n  const [isDarkTheme, setIsDarkTheme] = useState(true); // Default to dark theme\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage, setItemsPerPage] = useState(10); // Default 10 items per page\r\n  const [sortField, setSortField] = useState(null);\r\n  const [sortDirection, setSortDirection] = useState('asc');\r\n  const [csvUrl, setCsvUrl] = useState('');\r\n  const [inputMethod, setInputMethod] = useState('file'); // 'file' or 'url'\r\n  const [urlError, setUrlError] = useState('');\r\n  const [filters, setFilters] = useState({\r\n    codes: '', // New field for card codes search\r\n    series: '',\r\n    numberFrom: '',\r\n    numberTo: '',\r\n    wishlistsFrom: '',\r\n    wishlistsTo: '',\r\n    editions: [],\r\n    morphed: false,\r\n    trimmed: false,\r\n    frame: false,\r\n    hasDyeName: false,\r\n    tag: '',\r\n    noneTag: false,\r\n    // Blacklist filters\r\n    blacklistSeries: '',\r\n    blacklistCharacter: '',\r\n    blacklistTag: '',\r\n    excludeFrame: false,\r\n    excludeMorphed: false,\r\n    excludeTrimmed: false,\r\n    excludeDyeName: false\r\n  });\r\n  const [notFoundCodes, setNotFoundCodes] = useState([]);\r\n  const [showCodesModal, setShowCodesModal] = useState(false);\r\n  const [codesDisplayFormat, setCodesDisplayFormat] = useState('50per'); // '50per' or '1per'\r\n  \r\n  // Calculate the total number of pages\r\n  const totalPages = Math.ceil(displayData.length / itemsPerPage);\r\n  \r\n  const buildCardImageUrl = (character, edition) => {\r\n    const slug = String(character || '')\r\n      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') // usuń akcenty\r\n      .toLowerCase()\r\n      .replace(/['’]/g, '')           // usuń apostrofy\r\n      .replace(/[^a-z0-9]+/g, '-')    // nie-alfanumeryczne -> '-'\r\n      .replace(/^-+|-+$/g, '');       // przytnij '-'\r\n    \r\n    const ed = String(edition).toLowerCase();\r\n    return `https://d2l56h9h5tj8ue.cloudfront.net/images/cards/${slug}-${ed}.jpg`;\r\n  };\r\n\r\n  // Sort function\r\n  const handleSort = (field) => {\r\n    // If clicking the same field, toggle direction or reset\r\n    if (sortField === field) {\r\n      if (sortDirection === 'asc') {\r\n        setSortDirection('desc');\r\n      } else {\r\n        // Reset sorting\r\n        setSortField(null);\r\n        setSortDirection('asc');\r\n      }\r\n    } else {\r\n      // New field, start with ascending\r\n      setSortField(field);\r\n      setSortDirection('asc');\r\n    }\r\n  };\r\n  \r\n  // Apply sorting to data\r\n  const getSortedData = (data) => {\r\n    if (!sortField) return data;\r\n    \r\n    const sortedData = [...data];\r\n    \r\n    sortedData.sort((a, b) => {\r\n      // Handle numeric fields\r\n      if (['number', 'wishlists', 'edition', 'worker.effort'].includes(sortField)) {\r\n        const aVal = parseInt(a[sortField]) || 0;\r\n        const bVal = parseInt(b[sortField]) || 0;\r\n        \r\n        return sortDirection === 'asc' ? aVal - bVal : bVal - aVal;\r\n      }\r\n      \r\n      // Handle string fields\r\n      const aVal = a[sortField] || '';\r\n      const bVal = b[sortField] || '';\r\n      \r\n      if (sortDirection === 'asc') {\r\n        return aVal.localeCompare(bVal);\r\n      } else {\r\n        return bVal.localeCompare(aVal);\r\n      }\r\n    });\r\n    \r\n    return sortedData;\r\n  };\r\n  \r\n  // Get current page items\r\n  const getCurrentPageItems = () => {\r\n    const startIndex = (currentPage - 1) * itemsPerPage;\r\n    const endIndex = startIndex + itemsPerPage;\r\n    const sortedData = getSortedData(displayData);\r\n    return sortedData.slice(startIndex, endIndex);\r\n  };\r\n  \r\n  // Pagination controls\r\n  const goToFirstPage = () => setCurrentPage(1);\r\n  const goToPreviousPage = () => setCurrentPage(prev => Math.max(prev - 1, 1));\r\n  const goToNextPage = () => setCurrentPage(prev => Math.min(prev + 1, totalPages));\r\n  const goToLastPage = () => setCurrentPage(totalPages);\r\n  \r\n  // Handle direct page input\r\n  const handlePageInput = (e) => {\r\n    const value = parseInt(e.target.value);\r\n    if (!isNaN(value) && value >= 1 && value <= totalPages) {\r\n      setCurrentPage(value);\r\n    }\r\n  };\r\n  \r\n  // Handle items per page change\r\n  const handleItemsPerPageChange = (e) => {\r\n    const value = parseInt(e.target.value);\r\n    setItemsPerPage(value);\r\n    setCurrentPage(1); // Reset to first page when changing items per page\r\n  };\r\n  \r\n  // Set document title\r\n  useEffect(() => {\r\n    document.title = \"Karuta Cards Tool\";\r\n  }, []);\r\n  \r\n  // Theme toggle effect\r\n  useEffect(() => {\r\n    // Apply theme class to document\r\n    applyTheme(isDarkTheme);\r\n  }, []);\r\n  \r\n  // Function to apply the theme\r\n  const applyTheme = (dark) => {\r\n    if (dark) {\r\n      document.body.classList.add('dark-theme');\r\n    } else {\r\n      document.body.classList.remove('dark-theme');\r\n    }\r\n  };\r\n  \r\n  // Function to toggle theme\r\n  const toggleTheme = () => {\r\n    const newTheme = !isDarkTheme;\r\n    setIsDarkTheme(newTheme);\r\n    applyTheme(newTheme);\r\n  };\r\n  \r\n  // Handle file upload\r\n  const handleFileUpload = async (event) => {\r\n    const uploadedFile = event.target.files[0];\r\n    setFile(uploadedFile);\r\n    \r\n    if (uploadedFile) {\r\n      setLoading(true);\r\n      setUrlError('');\r\n      const content = await readFileContent(uploadedFile);\r\n      \r\n      Papa.parse(content, {\r\n        header: true,\r\n        complete: (results) => {\r\n          setData(results.data);\r\n          setFilteredData(results.data);\r\n          setDisplayData(results.data);\r\n          setLoading(false);\r\n        },\r\n        error: (error) => {\r\n          console.error('Error parsing CSV:', error);\r\n          setLoading(false);\r\n        }\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Handle URL input\r\n  const handleUrlLoad = async () => {\r\n    if (!csvUrl.trim()) {\r\n      setUrlError('Please enter a URL');\r\n      return;\r\n    }\r\n    \r\n    // Check if URL ends with .csv\r\n    if (!csvUrl.toLowerCase().endsWith('.csv')) {\r\n      setUrlError('URL must point to a .csv file');\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    setUrlError('');\r\n    setFile(null);\r\n    \r\n    try {\r\n      console.log('Loading CSV via proxy...');\r\n      \r\n      // Use working proxy directly\r\n      const proxyUrl = `https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(csvUrl)}`;\r\n      const response = await fetch(proxyUrl);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const csvContent = await response.text();\r\n      \r\n      // Check if content looks like CSV\r\n      if (!csvContent || csvContent.trim().length === 0) {\r\n        throw new Error('Empty file or invalid CSV content');\r\n      }\r\n      \r\n      // Check if it's actually CSV data (not an error page)\r\n      if (csvContent.includes('<html>') || csvContent.includes('<!DOCTYPE')) {\r\n        throw new Error('Received HTML instead of CSV data');\r\n      }\r\n      \r\n      Papa.parse(csvContent, {\r\n        header: true,\r\n        complete: (results) => {\r\n          if (results.errors && results.errors.length > 0) {\r\n            console.warn('CSV parsing warnings:', results.errors);\r\n          }\r\n          \r\n          if (!results.data || results.data.length === 0) {\r\n            setUrlError('No data found in CSV file');\r\n            setLoading(false);\r\n            return;\r\n          }\r\n          \r\n          setData(results.data);\r\n          setFilteredData(results.data);\r\n          setDisplayData(results.data);\r\n          setLoading(false);\r\n          console.log('✅ CSV loaded successfully!');\r\n        },\r\n        error: (error) => {\r\n          console.error('Error parsing CSV:', error);\r\n          setUrlError('Error parsing CSV file - please check if the file format is correct');\r\n          setLoading(false);\r\n        }\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error loading CSV:', error.message);\r\n      setUrlError(`❌ Unable to load CSV from URL: ${error.message}\\n\\n✅ Please try:\\n1. Check if the URL is correct and accessible\\n2. Download the file directly and use \"Upload File\"`);\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Read file content\r\n  const readFileContent = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => resolve(event.target.result);\r\n      reader.onerror = (error) => reject(error);\r\n      reader.readAsText(file);\r\n    });\r\n  };\r\n  \r\n  // Initialize empty state - no automatic data loading\r\n  useEffect(() => {\r\n    // Only process data if a file has been selected by the user\r\n    if (file) {\r\n      const processCSVData = (csvText) => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          complete: (results) => {\r\n            setData(results.data);\r\n            setFilteredData(results.data);\r\n            setDisplayData(results.data);\r\n          },\r\n          error: (error) => {\r\n            console.error('Error parsing CSV:', error);\r\n          }\r\n        });\r\n      };\r\n      \r\n      // If needed in the future, process file data here\r\n    } else {\r\n      // Reset data states when no file is loaded\r\n      setData([]);\r\n      setFilteredData([]);\r\n      setDisplayData([]);\r\n    }\r\n  }, [file]);\r\n  \r\n  // Apply filters function\r\n  const applyFilters = () => {\r\n    let results = [...data];\r\n    \r\n    // Filter by card codes (if specified)\r\n    if (filters.codes.trim()) {\r\n      const searchCodes = filters.codes.toLowerCase().split(',').map(code => code.trim()).filter(code => code.length > 0);\r\n      const foundCodes = [];\r\n      const notFound = [];\r\n      \r\n      // Find cards that match the specified codes\r\n      const codeResults = [];\r\n      searchCodes.forEach(searchCode => {\r\n        const matchingCards = data.filter(card => card.code.toLowerCase() === searchCode);\r\n        if (matchingCards.length > 0) {\r\n          codeResults.push(...matchingCards);\r\n          foundCodes.push(searchCode);\r\n        } else {\r\n          notFound.push(searchCode);\r\n        }\r\n      });\r\n      \r\n      results = codeResults;\r\n      setNotFoundCodes(notFound);\r\n    } else {\r\n      setNotFoundCodes([]);\r\n    }\r\n    \r\n    // If codes filter is active, skip other filters (codes take priority)\r\n    if (!filters.codes.trim()) {\r\n      // Filter by series\r\n      if (filters.series) {\r\n        // Allow multiple series names separated by commas\r\n        const includedSeries = filters.series.toLowerCase().split(',').map(s => s.trim());\r\n        results = results.filter(card => {\r\n          const cardSeries = card.series.toLowerCase();\r\n          return includedSeries.some(series => cardSeries.includes(series));\r\n        });\r\n      }\r\n      \r\n      // Filter by number range\r\n      if (filters.numberFrom) {\r\n        results = results.filter(card => \r\n          parseInt(card.number) >= parseInt(filters.numberFrom)\r\n        );\r\n      }\r\n      \r\n      if (filters.numberTo) {\r\n        results = results.filter(card => \r\n          parseInt(card.number) <= parseInt(filters.numberTo)\r\n        );\r\n      }\r\n      \r\n      // Filter by wishlists range\r\n      if (filters.wishlistsFrom) {\r\n        results = results.filter(card => \r\n          parseInt(card.wishlists) >= parseInt(filters.wishlistsFrom)\r\n        );\r\n      }\r\n      \r\n      if (filters.wishlistsTo) {\r\n        results = results.filter(card => \r\n          parseInt(card.wishlists) <= parseInt(filters.wishlistsTo)\r\n        );\r\n      }\r\n      \r\n      // Filter by editions\r\n      if (filters.editions.length > 0) {\r\n        results = results.filter(card => \r\n          filters.editions.includes(card.edition)\r\n        );\r\n      }\r\n      \r\n      // Filter by morphed\r\n      if (filters.morphed) {\r\n        results = results.filter(card => card.morphed === \"Yes\");\r\n      }\r\n      \r\n      // Filter by trimmed\r\n      if (filters.trimmed) {\r\n        results = results.filter(card => card.trimmed === \"Yes\");\r\n      }\r\n      \r\n      // Filter by frame\r\n      if (filters.frame) {\r\n        results = results.filter(card => card.frame !== \"\");\r\n      }\r\n      \r\n      // Filter by dye.name\r\n      if (filters.hasDyeName) {\r\n        results = results.filter(card => card[\"dye.name\"] !== \"\");\r\n      }\r\n      \r\n      // Filter by tag\r\n      if (filters.tag) {\r\n        results = results.filter(card => \r\n          card.tag.toLowerCase().includes(filters.tag.toLowerCase())\r\n        );\r\n      }\r\n      \r\n      // Filter for cards with no tag\r\n      if (filters.noneTag) {\r\n        results = results.filter(card => \r\n          !card.tag || card.tag.trim() === ''\r\n        );\r\n      }\r\n      \r\n      // Apply blacklist filters\r\n      \r\n      // Blacklist series filter\r\n      if (filters.blacklistSeries) {\r\n        // Allow multiple series names separated by commas\r\n        const blacklistedSeries = filters.blacklistSeries.toLowerCase().split(',').map(s => s.trim());\r\n        results = results.filter(card => {\r\n          const cardSeries = card.series.toLowerCase();\r\n          return !blacklistedSeries.some(series => cardSeries.includes(series));\r\n        });\r\n      }\r\n      \r\n      // Blacklist character filter\r\n      if (filters.blacklistCharacter) {\r\n        // Allow multiple character names separated by commas\r\n        const blacklistedCharacters = filters.blacklistCharacter.toLowerCase().split(',').map(c => c.trim());\r\n        results = results.filter(card => {\r\n          const cardCharacter = card.character.toLowerCase();\r\n          return !blacklistedCharacters.some(character => cardCharacter.includes(character));\r\n        });\r\n      }\r\n      \r\n      // Blacklist tag filter\r\n      if (filters.blacklistTag) {\r\n        // Allow multiple tags separated by commas\r\n        const blacklistedTags = filters.blacklistTag.toLowerCase().split(',').map(t => t.trim());\r\n        results = results.filter(card => {\r\n          const cardTag = (card.tag || '').toLowerCase();\r\n          return !blacklistedTags.some(tag => cardTag.includes(tag));\r\n        });\r\n      }\r\n      \r\n      // Exclude cards with frame\r\n      if (filters.excludeFrame) {\r\n        results = results.filter(card => !card.frame || card.frame.trim() === '');\r\n      }\r\n      \r\n      // Exclude morphed cards\r\n      if (filters.excludeMorphed) {\r\n        results = results.filter(card => card.morphed !== \"Yes\");\r\n      }\r\n      \r\n      // Exclude trimmed cards\r\n      if (filters.excludeTrimmed) {\r\n        results = results.filter(card => card.trimmed !== \"Yes\");\r\n      }\r\n      \r\n      // Exclude cards with dye.name\r\n      if (filters.excludeDyeName) {\r\n        results = results.filter(card => !card[\"dye.name\"] || card[\"dye.name\"].trim() === '');\r\n      }\r\n    }\r\n    \r\n    setFilteredData(results);\r\n    setDisplayData(results);\r\n    // Reset pagination when filters change\r\n    setCurrentPage(1);\r\n    // Reset copy batch when filters change\r\n    setCopyBatch(0);\r\n    setCopiedAll(false);\r\n  };\r\n  \r\n  // Handle filter changes - back to manual filtering\r\n  const handleFilterChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    \r\n    setFilters({\r\n      ...filters,\r\n      [name]: type === 'checkbox' ? checked : value\r\n    });\r\n  };\r\n  \r\n  // Handle edition selection - back to manual filtering\r\n  const handleEditionChange = (edition) => {\r\n    const newEditions = [...filters.editions];\r\n    \r\n    if (newEditions.includes(edition)) {\r\n      const index = newEditions.indexOf(edition);\r\n      newEditions.splice(index, 1);\r\n    } else {\r\n      newEditions.push(edition);\r\n    }\r\n    \r\n    setFilters({\r\n      ...filters,\r\n      editions: newEditions\r\n    });\r\n  };\r\n  \r\n  // Reset filters\r\n  const resetFilters = () => {\r\n    setFilters({\r\n      codes: '', // Reset codes filter\r\n      series: '',\r\n      numberFrom: '',\r\n      numberTo: '',\r\n      wishlistsFrom: '',\r\n      wishlistsTo: '',\r\n      editions: [],\r\n      morphed: false,\r\n      trimmed: false,\r\n      frame: false,\r\n      hasDyeName: false,\r\n      tag: '',\r\n      noneTag: false,\r\n      // Reset blacklist filters\r\n      blacklistSeries: '',\r\n      blacklistCharacter: '',\r\n      blacklistTag: '',\r\n      excludeFrame: false,\r\n      excludeMorphed: false,\r\n      excludeTrimmed: false,\r\n      excludeDyeName: false\r\n    });\r\n    \r\n    // Reset sorting\r\n    setSortField(null);\r\n    setSortDirection('asc');\r\n    \r\n    // Clear not found codes\r\n    setNotFoundCodes([]);\r\n    \r\n    setFilteredData(data);\r\n    setDisplayData(data);\r\n    setCopyBatch(0);\r\n    setCopiedAll(false);\r\n    setSingleCopyIndex(0);\r\n    setSingleCopiedAll(false);\r\n  };\r\n  \r\n  // Copy card codes to clipboard - updated to handle batches and remove copied cards\r\n  const copyCardCodes = () => {\r\n    const batchSize = 50;\r\n    const totalBatches = Math.ceil(filteredData.length / batchSize);\r\n    \r\n    // If we've copied all batches, reset to beginning and restore display\r\n    if (copyBatch >= totalBatches || copiedAll) {\r\n      setCopyBatch(0);\r\n      setCopiedAll(false);\r\n      setDisplayData([...filteredData]);\r\n      return;\r\n    }\r\n    \r\n    const startIndex = copyBatch * batchSize;\r\n    const endIndex = Math.min(startIndex + batchSize, filteredData.length);\r\n    const cardsToCopy = filteredData.slice(startIndex, endIndex);\r\n    \r\n    // Add prefix if it exists\r\n    let codes;\r\n    if (prefix.trim()) {\r\n      codes = cardsToCopy.map(card => `${prefix} ${card.code}`).join(', ');\r\n    } else {\r\n      codes = cardsToCopy.map(card => card.code).join(', ');\r\n    }\r\n    \r\n    navigator.clipboard.writeText(codes);\r\n    alert(`Copied codes ${startIndex+1}-${endIndex} of ${filteredData.length}`)\r\n    \r\n    // Remove copied cards from display\r\n    const newDisplayData = displayData.filter(card => \r\n      !cardsToCopy.some(copiedCard => copiedCard.code === card.code)\r\n    );\r\n    \r\n    setDisplayData(newDisplayData);\r\n    \r\n    // Move to next batch\r\n    setCopyBatch(copyBatch + 1);\r\n    \r\n    // If we've copied all, mark as completed\r\n    if (endIndex >= filteredData.length) {\r\n      setCopiedAll(true);\r\n    }\r\n  };\r\n\r\n  // Copy card codes to clipboard (one card at a time)\r\n  const copyCardCodesOneLine = () => {\r\n    // If we've copied all cards, reset to beginning and restore display\r\n    if (filteredData.length === 0 || singleCopyIndex >= filteredData.length || singleCopiedAll) {\r\n      setSingleCopyIndex(0);\r\n      setSingleCopiedAll(false);\r\n      setDisplayData([...filteredData]);\r\n      return;\r\n    }\r\n    \r\n    // Get the single card to copy\r\n    const cardToCopy = filteredData[singleCopyIndex];\r\n    \r\n    // Add prefix if it exists, for a single code\r\n    let code;\r\n    if (prefix.trim()) {\r\n      code = `${prefix} ${cardToCopy.code}`;\r\n    } else {\r\n      code = cardToCopy.code;\r\n    }\r\n    \r\n    navigator.clipboard.writeText(code);\r\n    alert(`Copied code ${singleCopyIndex+1} of ${filteredData.length}: ${cardToCopy.code}`);\r\n    \r\n    // Remove only this copied card from display\r\n    const newDisplayData = displayData.filter(card => card.code !== cardToCopy.code);\r\n    setDisplayData(newDisplayData);\r\n    \r\n    // Move to next card\r\n    setSingleCopyIndex(singleCopyIndex + 1);\r\n    \r\n    // If we've copied all, mark as completed\r\n    if (singleCopyIndex + 1 >= filteredData.length) {\r\n      setSingleCopiedAll(true);\r\n    }\r\n  };\r\n  \r\n  // Download card codes as text file\r\n  const downloadCardCodes = () => {\r\n    const maxCodesPerLine = 50;\r\n    let content = '';\r\n    \r\n    for (let i = 0; i < filteredData.length; i += maxCodesPerLine) {\r\n      const batch = filteredData.slice(i, i + maxCodesPerLine);\r\n      \r\n      // Add prefix if it exists\r\n      if (prefix.trim()) {\r\n        content += prefix + ' ' + batch.map(card => card.code).join(', ') + '\\n';\r\n      } else {\r\n        content += batch.map(card => card.code).join(', ') + '\\n';\r\n      }\r\n    }\r\n    \r\n    const blob = new Blob([content], { type: 'text/plain' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'card_codes.txt';\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  // Download card codes as text file (one per line)\r\n  const downloadCardCodesOneLine = () => {\r\n    let content = '';\r\n    \r\n    // Add prefix if it exists, one code per line\r\n    if (prefix.trim()) {\r\n      content = filteredData.map(card => `${prefix} ${card.code}`).join('\\n');\r\n    } else {\r\n      content = filteredData.map(card => card.code).join('\\n');\r\n    }\r\n    \r\n    const blob = new Blob([content], { type: 'text/plain' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'card_codes_one_per_line.txt';\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n  \r\n  // Get unique editions\r\n  const getUniqueEditions = () => {\r\n    if (data.length === 0) return [];\r\n    \r\n    const editions = [...new Set(data.map(card => card.edition))];\r\n    return editions.sort((a, b) => parseInt(a) - parseInt(b));\r\n  };\r\n  \r\n  // Get copy button text\r\n  const getCopyButtonText = () => {\r\n    const batchSize = 50;\r\n    const totalBatches = Math.ceil(filteredData.length / batchSize);\r\n    \r\n    if (filteredData.length === 0) {\r\n      return \"Copy Codes (max 50)\";\r\n    }\r\n    \r\n    // If we've copied all batches or marked as copied all, show that we're starting over\r\n    if (copyBatch >= totalBatches || copiedAll) {\r\n      return \"Restore & Start Over\";\r\n    }\r\n    \r\n    const startIndex = copyBatch * batchSize;\r\n    const endIndex = Math.min(startIndex + batchSize, filteredData.length);\r\n    \r\n    return `Copy Codes (${startIndex}/${filteredData.length})`;\r\n  };\r\n  \r\n  // Get single copy button text\r\n  const getSingleCopyButtonText = () => {\r\n    if (filteredData.length === 0) {\r\n      return \"Copy Single Code\";\r\n    }\r\n    \r\n    // If we've copied all cards or marked as single copied all, show that we're starting over\r\n    if (singleCopyIndex >= filteredData.length || singleCopiedAll) {\r\n      return \"Restore & Start Over\";\r\n    }\r\n    \r\n    return `Copy Single Code (${singleCopyIndex}/${filteredData.length})`;\r\n  };\r\n  \r\n  // Generate codes for display in modal\r\n  const generateCodesForDisplay = () => {\r\n    if (filteredData.length === 0) return '';\r\n    \r\n    if (codesDisplayFormat === '50per') {\r\n      const maxCodesPerLine = 50;\r\n      let content = '';\r\n      \r\n      for (let i = 0; i < filteredData.length; i += maxCodesPerLine) {\r\n        const batch = filteredData.slice(i, i + maxCodesPerLine);\r\n        \r\n        // Add prefix if it exists\r\n        if (prefix.trim()) {\r\n          content += prefix + ' ' + batch.map(card => card.code).join(', ') + '\\n';\r\n        } else {\r\n          content += batch.map(card => card.code).join(', ') + '\\n';\r\n        }\r\n      }\r\n      \r\n      return content.trim();\r\n    } else {\r\n      // 1 per line format\r\n      if (prefix.trim()) {\r\n        return filteredData.map(card => `${prefix} ${card.code}`).join('\\n');\r\n      } else {\r\n        return filteredData.map(card => card.code).join('\\n');\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Copy codes from modal to clipboard\r\n  const copyCodesFromModal = () => {\r\n    const codes = generateCodesForDisplay();\r\n    navigator.clipboard.writeText(codes);\r\n    alert(`Copied ${filteredData.length} codes to clipboard!`);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      {/* Theme Toggle Switch */}\r\n      <div className=\"theme-switch-container\">\r\n        <span className=\"theme-icon\">☀️</span>\r\n        <label className=\"theme-switch\">\r\n          <input \r\n            type=\"checkbox\" \r\n            checked={isDarkTheme}\r\n            onChange={toggleTheme}\r\n          />\r\n          <span className=\"slider\"></span>\r\n        </label>\r\n        <span className=\"theme-icon\">🌙</span>\r\n      </div>\r\n      \r\n      <h1 className=\"header\">Card Filter Application</h1>\r\n      \r\n      {/* File upload */}\r\n      <div className=\"card\">\r\n        <h2>Load CSV Data</h2>\r\n        \r\n        {/* Input method selection */}\r\n        <div className=\"form-group\">\r\n          <label className=\"form-label\">Choose input method:</label>\r\n          <div className=\"flex gap-4\">\r\n            <div className=\"checkbox-container\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"file-method\"\r\n                name=\"input-method\"\r\n                checked={inputMethod === 'file'}\r\n                onChange={() => {\r\n                  setInputMethod('file');\r\n                  setCsvUrl('');\r\n                  setUrlError('');\r\n                }}\r\n                className=\"checkbox\"\r\n              />\r\n              <label htmlFor=\"file-method\" className=\"checkbox-label\">\r\n                Upload File\r\n              </label>\r\n            </div>\r\n            \r\n            <div className=\"checkbox-container\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"url-method\"\r\n                name=\"input-method\"\r\n                checked={inputMethod === 'url'}\r\n                onChange={() => {\r\n                  setInputMethod('url');\r\n                  setFile(null);\r\n                }}\r\n                className=\"checkbox\"\r\n              />\r\n              <label htmlFor=\"url-method\" className=\"checkbox-label\">\r\n                Load from URL\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* File upload section */}\r\n        {inputMethod === 'file' && (\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Select CSV or TXT file:</label>\r\n            <input \r\n              type=\"file\" \r\n              accept=\".csv, .txt\" \r\n              onChange={handleFileUpload} \r\n              className=\"form-input\"\r\n            />\r\n          </div>\r\n        )}\r\n        \r\n        {/* URL input section */}\r\n        {inputMethod === 'url' && (\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">CSV file URL:</label>\r\n            <div className=\"flex gap-2\">\r\n              <input\r\n                type=\"url\"\r\n                value={csvUrl}\r\n                onChange={(e) => setCsvUrl(e.target.value)}\r\n                className=\"form-input\"\r\n                placeholder=\"https://example.com/file.csv\"\r\n                style={{flex: 1}}\r\n              />\r\n              <button\r\n                onClick={handleUrlLoad}\r\n                disabled={loading}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                {loading ? 'Loading...' : 'Load CSV'}\r\n              </button>\r\n            </div>\r\n            <p className=\"text-gray-500 text-sm mt-1\">\r\n              Enter a direct link to a CSV file. The URL must end with .csv\r\n            </p>\r\n            {urlError && (\r\n              <div className=\"url-error\">\r\n                <p className=\"text-error\">\r\n                  {urlError}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n        \r\n        {/* Loading and status messages */}\r\n        {loading && <p>Loading data...</p>}\r\n        {!loading && data.length > 0 && (\r\n          <p className=\"text-success\">Loaded {data.length} records.</p>\r\n        )}\r\n        {!loading && data.length === 0 && !file && !csvUrl && (\r\n          <p>No data loaded. Please upload a CSV/TXT file or provide a CSV URL.</p>\r\n        )}\r\n        \r\n        <div className=\"form-group\">\r\n          <label className=\"form-label\">Prefix for card codes:</label>\r\n          <input\r\n            type=\"text\"\r\n            value={prefix}\r\n            onChange={(e) => setPrefix(e.target.value)}\r\n            className=\"form-input\"\r\n            placeholder=\"Enter prefix (e.g. 'kt t1')\"\r\n          />\r\n          <p className=\"text-gray-500 text-sm mt-1\">\r\n            This text will be added before each card code when copying or downloading.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Filters card */}\r\n      <div className=\"card\">\r\n        <h2>Filters</h2>\r\n        \r\n        {/* Include filters section */}\r\n        <div className=\"filter-section\">\r\n          <h3 className=\"filter-section-title\">Include Filters</h3>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Search by Card Codes:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"codes\"\r\n              value={filters.codes}\r\n              onChange={handleFilterChange}\r\n              className=\"form-input\"\r\n              placeholder=\"Enter card codes separated by commas (e.g., vpvh96n, vzgrgsx)\"\r\n            />\r\n            <p className=\"text-gray-500 text-sm mt-1\">\r\n              Search for specific cards by their codes. This will override other filters when used.\r\n            </p>\r\n            {notFoundCodes.length > 0 && (\r\n              <div className=\"not-found-codes\">\r\n                <p className=\"text-warning\">\r\n                  <strong>Not found codes:</strong> {notFoundCodes.join(', ')}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Series:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"series\"\r\n              value={filters.series}\r\n              onChange={handleFilterChange}\r\n              className=\"form-input\"\r\n              placeholder=\"Enter series names (comma-separated)\"\r\n              disabled={filters.codes.trim() !== ''}\r\n            />\r\n            {filters.series && filters.series.includes(',') && !filters.codes.trim() && (\r\n              <p className=\"text-info text-sm mt-1\">\r\n                Including series containing: {filters.series}\r\n              </p>\r\n            )}\r\n            {filters.codes.trim() && (\r\n              <p className=\"text-gray-500 text-sm mt-1\">\r\n                Disabled while using code search\r\n              </p>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Number:</label>\r\n            <div className=\"flex gap-2\">\r\n              <input\r\n                type=\"number\"\r\n                name=\"numberFrom\"\r\n                value={filters.numberFrom}\r\n                onChange={handleFilterChange}\r\n                className=\"form-input\"\r\n                placeholder=\"From\"\r\n                disabled={filters.codes.trim() !== ''}\r\n              />\r\n              <input\r\n                type=\"number\"\r\n                name=\"numberTo\"\r\n                value={filters.numberTo}\r\n                onChange={handleFilterChange}\r\n                className=\"form-input\"\r\n                placeholder=\"To\"\r\n                disabled={filters.codes.trim() !== ''}\r\n              />\r\n            </div>\r\n            {filters.codes.trim() && (\r\n              <p className=\"text-gray-500 text-sm mt-1\">\r\n                Disabled while using code search\r\n              </p>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Wishlists:</label>\r\n            <div className=\"flex gap-2\">\r\n              <input\r\n                type=\"number\"\r\n                name=\"wishlistsFrom\"\r\n                value={filters.wishlistsFrom}\r\n                onChange={handleFilterChange}\r\n                className=\"form-input\"\r\n                placeholder=\"From\"\r\n                disabled={filters.codes.trim() !== ''}\r\n              />\r\n              <input\r\n                type=\"number\"\r\n                name=\"wishlistsTo\"\r\n                value={filters.wishlistsTo}\r\n                onChange={handleFilterChange}\r\n                className=\"form-input\"\r\n                placeholder=\"To\"\r\n                disabled={filters.codes.trim() !== ''}\r\n              />\r\n            </div>\r\n            {filters.codes.trim() && (\r\n              <p className=\"text-gray-500 text-sm mt-1\">\r\n                Disabled while using code search\r\n              </p>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Tag:</label>\r\n            <div className=\"flex gap-2\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"tag\"\r\n                value={filters.tag}\r\n                onChange={handleFilterChange}\r\n                className=\"form-input\"\r\n                placeholder=\"Enter tag...\"\r\n                disabled={filters.noneTag || filters.codes.trim() !== ''}\r\n              />\r\n              <button\r\n                onClick={() => setFilters({...filters, noneTag: !filters.noneTag, tag: filters.noneTag ? filters.tag : ''})}\r\n                className={`btn ${filters.noneTag ? 'btn-primary' : 'btn-secondary'}`}\r\n                title=\"Show only cards with no tag\"\r\n                disabled={filters.codes.trim() !== ''}\r\n              >\r\n                None Tag\r\n              </button>\r\n            </div>\r\n            {filters.noneTag && !filters.codes.trim() && (\r\n              <p className=\"text-info text-sm mt-1\">\r\n                Showing only cards with no tag. Tag search is disabled.\r\n              </p>\r\n            )}\r\n            {filters.codes.trim() && (\r\n              <p className=\"text-gray-500 text-sm mt-1\">\r\n                Disabled while using code search\r\n              </p>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Editions:</label>\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              {getUniqueEditions().map((edition) => (\r\n                <button\r\n                  key={edition}\r\n                  onClick={() => !filters.codes.trim() && handleEditionChange(edition)}\r\n                  className={`chip ${\r\n                    filters.editions.includes(edition)\r\n                      ? 'chip-blue'\r\n                      : 'chip-gray'\r\n                  } ${filters.codes.trim() ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n                  disabled={filters.codes.trim() !== ''}\r\n                >\r\n                  {edition}\r\n                </button>\r\n              ))}\r\n            </div>\r\n            {filters.codes.trim() && (\r\n              <p className=\"text-gray-500 text-sm mt-1\">\r\n                Disabled while using code search\r\n              </p>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <div className=\"checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"morphed\"\r\n                  name=\"morphed\"\r\n                  checked={filters.morphed}\r\n                  onChange={handleFilterChange}\r\n                  className=\"checkbox\"\r\n                  disabled={filters.codes.trim() !== ''}\r\n                />\r\n                <label htmlFor=\"morphed\" className={`checkbox-label ${filters.codes.trim() ? 'opacity-50' : ''}`}>\r\n                  Morphed\r\n                </label>\r\n              </div>\r\n              \r\n              <div className=\"checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"trimmed\"\r\n                  name=\"trimmed\"\r\n                  checked={filters.trimmed}\r\n                  onChange={handleFilterChange}\r\n                  className=\"checkbox\"\r\n                  disabled={filters.codes.trim() !== ''}\r\n                />\r\n                <label htmlFor=\"trimmed\" className={`checkbox-label ${filters.codes.trim() ? 'opacity-50' : ''}`}>\r\n                  Trimmed\r\n                </label>\r\n              </div>\r\n              \r\n              <div className=\"checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"frame\"\r\n                  name=\"frame\"\r\n                  checked={filters.frame}\r\n                  onChange={handleFilterChange}\r\n                  className=\"checkbox\"\r\n                  disabled={filters.codes.trim() !== ''}\r\n                />\r\n                <label htmlFor=\"frame\" className={`checkbox-label ${filters.codes.trim() ? 'opacity-50' : ''}`}>\r\n                  With Frame\r\n                </label>\r\n              </div>\r\n              \r\n              <div className=\"checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"hasDyeName\"\r\n                  name=\"hasDyeName\"\r\n                  checked={filters.hasDyeName}\r\n                  onChange={handleFilterChange}\r\n                  className=\"checkbox\"\r\n                  disabled={filters.codes.trim() !== ''}\r\n                />\r\n                <label htmlFor=\"hasDyeName\" className={`checkbox-label ${filters.codes.trim() ? 'opacity-50' : ''}`}>\r\n                  With dye.name\r\n                </label>\r\n              </div>\r\n            </div>\r\n            {filters.codes.trim() && (\r\n              <p className=\"text-gray-500 text-sm mt-1\">\r\n                Disabled while using code search\r\n              </p>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"flex gap-2 mt-4\">\r\n            <button\r\n              onClick={applyFilters}\r\n              className=\"btn btn-primary\"\r\n            >\r\n              Apply Filters\r\n            </button>\r\n            <button\r\n              onClick={resetFilters}\r\n              className=\"btn btn-secondary\"\r\n            >\r\n              Reset Filters\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"filter-section-divider\"></div>\r\n        \r\n        {/* Exclude filters section */}\r\n        <div className=\"filter-section\">\r\n          <h3 className=\"filter-section-title\">Exclude Filters (Blacklist)</h3>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Exclude Series:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"blacklistSeries\"\r\n              value={filters.blacklistSeries}\r\n              onChange={handleFilterChange}\r\n              className=\"form-input\"\r\n              placeholder=\"Enter series to exclude (comma-separated)\"\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Exclude Characters:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"blacklistCharacter\"\r\n              value={filters.blacklistCharacter}\r\n              onChange={handleFilterChange}\r\n              className=\"form-input\"\r\n              placeholder=\"Enter characters to exclude (comma-separated)\"\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Exclude Tags:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"blacklistTag\"\r\n              value={filters.blacklistTag}\r\n              onChange={handleFilterChange}\r\n              className=\"form-input\"\r\n              placeholder=\"Enter tags to exclude (comma-separated)\"\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <div className=\"checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"excludeFrame\"\r\n                  name=\"excludeFrame\"\r\n                  checked={filters.excludeFrame}\r\n                  onChange={handleFilterChange}\r\n                  className=\"checkbox\"\r\n                />\r\n                <label htmlFor=\"excludeFrame\" className=\"checkbox-label\">\r\n                  Exclude Cards with Frame\r\n                </label>\r\n              </div>\r\n              \r\n              <div className=\"checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"excludeMorphed\"\r\n                  name=\"excludeMorphed\"\r\n                  checked={filters.excludeMorphed}\r\n                  onChange={handleFilterChange}\r\n                  className=\"checkbox\"\r\n                />\r\n                <label htmlFor=\"excludeMorphed\" className=\"checkbox-label\">\r\n                  Exclude Morphed Cards\r\n                </label>\r\n              </div>\r\n              \r\n              <div className=\"checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"excludeTrimmed\"\r\n                  name=\"excludeTrimmed\"\r\n                  checked={filters.excludeTrimmed}\r\n                  onChange={handleFilterChange}\r\n                  className=\"checkbox\"\r\n                />\r\n                <label htmlFor=\"excludeTrimmed\" className=\"checkbox-label\">\r\n                  Exclude Trimmed Cards\r\n                </label>\r\n              </div>\r\n              \r\n              <div className=\"checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"excludeDyeName\"\r\n                  name=\"excludeDyeName\"\r\n                  checked={filters.excludeDyeName}\r\n                  onChange={handleFilterChange}\r\n                  className=\"checkbox\"\r\n                />\r\n                <label htmlFor=\"excludeDyeName\" className=\"checkbox-label\">\r\n                  Exclude Cards with dye.name\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex gap-2 mt-4\">\r\n            <button\r\n              onClick={applyFilters}\r\n              className=\"btn btn-primary\"\r\n            >\r\n              Apply Filters\r\n            </button>\r\n            <button\r\n              onClick={resetFilters}\r\n              className=\"btn btn-secondary\"\r\n            >\r\n              Reset Filters\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Results section */}\r\n      <div className=\"card\">\r\n        <div className=\"results-header\">\r\n          <h2>Results {data.length > 0 ? `(${displayData.length}/${filteredData.length})` : \"\"}</h2>\r\n          <div className=\"results-actions\">\r\n            <button\r\n              onClick={copyCardCodes}\r\n              disabled={filteredData.length === 0}\r\n              className={`btn ${\r\n                filteredData.length === 0\r\n                  ? 'btn-secondary'\r\n                  : 'btn-success'\r\n              }`}\r\n              title=\"Copy up to 50 codes separated by commas\"\r\n            >\r\n              <span className=\"btn-text-full\">{getCopyButtonText()}</span>\r\n              <span className=\"btn-text-short\">Copy 50</span>\r\n            </button>\r\n            <button\r\n              onClick={copyCardCodesOneLine}\r\n              disabled={filteredData.length === 0}\r\n              className={`btn ${\r\n                filteredData.length === 0\r\n                  ? 'btn-secondary'\r\n                  : 'btn-success'\r\n              }`}\r\n              title=\"Copy a single code at a time\"\r\n            >\r\n              <span className=\"btn-text-full\">{getSingleCopyButtonText()}</span>\r\n              <span className=\"btn-text-short\">Copy 1</span>\r\n            </button>\r\n            <button\r\n              onClick={downloadCardCodes}\r\n              disabled={filteredData.length === 0}\r\n              className={`btn ${\r\n                filteredData.length === 0\r\n                  ? 'btn-secondary'\r\n                  : 'btn-purple'\r\n              }`}\r\n              title=\"Download with up to 50 codes per line\"\r\n            >\r\n              <span className=\"btn-text-full\">Download (50 max)</span>\r\n              <span className=\"btn-text-short\">DL 50</span>\r\n            </button>\r\n            <button\r\n              onClick={downloadCardCodesOneLine}\r\n              disabled={filteredData.length === 0}\r\n              className={`btn ${\r\n                filteredData.length === 0\r\n                  ? 'btn-secondary'\r\n                  : 'btn-purple'\r\n              }`}\r\n              title=\"Download with one code per line\"\r\n            >\r\n              <span className=\"btn-text-full\">Download (1 per line)</span>\r\n              <span className=\"btn-text-short\">DL 1</span>\r\n            </button>\r\n            <button\r\n              onClick={() => setShowCodesModal(true)}\r\n              disabled={filteredData.length === 0}\r\n              className={`btn ${\r\n                filteredData.length === 0\r\n                  ? 'btn-secondary'\r\n                  : 'btn-info'\r\n              }`}\r\n              title=\"Show codes in a modal window\"\r\n            >\r\n              <span className=\"btn-text-full\">Show Codes</span>\r\n              <span className=\"btn-text-short\">Show</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Results table */}\r\n        {displayData.length > 0 ? (\r\n          <div className=\"table-container\">\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Image</th>\r\n                  <th onClick={() => handleSort('code')} className=\"sortable-header\">\r\n                    Code {sortField === 'code' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\r\n                  </th>\r\n                  <th onClick={() => handleSort('number')} className=\"sortable-header\">\r\n                    Number {sortField === 'number' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\r\n                  </th>\r\n                  <th onClick={() => handleSort('edition')} className=\"sortable-header\">\r\n                    Edition {sortField === 'edition' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\r\n                  </th>\r\n                  <th onClick={() => handleSort('character')} className=\"sortable-header\">\r\n                    Character {sortField === 'character' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\r\n                  </th>\r\n                  <th onClick={() => handleSort('series')} className=\"sortable-header\">\r\n                    Series {sortField === 'series' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\r\n                  </th>\r\n                  <th onClick={() => handleSort('quality')} className=\"sortable-header\">\r\n                    Quality {sortField === 'quality' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\r\n                  </th>\r\n                  <th onClick={() => handleSort('wishlists')} className=\"sortable-header\">\r\n                    Wishlists {sortField === 'wishlists' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\r\n                  </th>\r\n                  <th onClick={() => handleSort('worker.effort')} className=\"sortable-header\">\r\n                    Worker Effort {sortField === 'worker.effort' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\r\n                  </th>\r\n                  <th onClick={() => handleSort('frame')} className=\"sortable-header\">\r\n                    Frame {sortField === 'frame' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\r\n                  </th>\r\n                  <th onClick={() => handleSort('tag')} className=\"sortable-header\">\r\n                    Tag {sortField === 'tag' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {getCurrentPageItems().map((card, index) => (\r\n                  <tr key={index}>\r\n                    <td>\r\n                      <img\r\n                        src={buildCardImageUrl(card.character, card.edition)}\r\n                        alt={`${card.character} ${card.edition}`}\r\n                        className=\"card-thumb\"\r\n                        loading=\"lazy\"\r\n                        onError={(e) => { e.currentTarget.style.display = 'none'; }} // ukryj jeśli brak obrazka\r\n                      />\r\n                    </td>\r\n                    <td className=\"code-cell\">{card.code}</td>\r\n                    <td>{card.number}</td>\r\n                    <td>{card.edition}</td>\r\n                    <td>{card.character}</td>\r\n                    <td>{card.series}</td>\r\n                    <td>{card.quality}</td>\r\n                    <td>{card.wishlists}</td>\r\n                    <td>{card['worker.effort'] || \"0\"}</td>\r\n                    <td>{card.frame || \"—\"}</td>\r\n                    <td>{card.tag}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        ) : (\r\n          <p className=\"no-results\">\r\n            {file ? \"No results matching the filter criteria.\" : \"No data loaded. Please upload a file to see results.\"}\r\n          </p>\r\n        )}\r\n        \r\n        {/* Pagination controls */}\r\n        {displayData.length > 0 && (\r\n          <div className=\"pagination-container\">\r\n            <button \r\n              onClick={goToFirstPage} \r\n              disabled={currentPage === 1}\r\n              className={`btn ${currentPage === 1 ? 'btn-secondary' : 'btn-primary'}`}\r\n              title=\"First Page\"\r\n            >\r\n              &laquo;\r\n            </button>\r\n            <button \r\n              onClick={goToPreviousPage} \r\n              disabled={currentPage === 1}\r\n              className={`btn ${currentPage === 1 ? 'btn-secondary' : 'btn-primary'}`}\r\n              title=\"Previous Page\"\r\n            >\r\n              &lsaquo;\r\n            </button>\r\n            \r\n            <div className=\"page-info\">\r\n              <span>Page</span>\r\n              <input \r\n                type=\"number\" \r\n                min=\"1\" \r\n                max={totalPages} \r\n                value={currentPage}\r\n                onChange={handlePageInput}\r\n                className=\"page-input form-input\"\r\n              />\r\n              <span>of {totalPages}</span>\r\n            </div>\r\n            \r\n            <button \r\n              onClick={goToNextPage} \r\n              disabled={currentPage === totalPages}\r\n              className={`btn ${currentPage === totalPages ? 'btn-secondary' : 'btn-primary'}`}\r\n              title=\"Next Page\"\r\n            >\r\n              &rsaquo;\r\n            </button>\r\n            <button \r\n              onClick={goToLastPage} \r\n              disabled={currentPage === totalPages}\r\n              className={`btn ${currentPage === totalPages ? 'btn-secondary' : 'btn-primary'}`}\r\n              title=\"Last Page\"\r\n            >\r\n              &raquo;\r\n            </button>\r\n            \r\n            <div className=\"items-per-page\">\r\n              <span>Show</span>\r\n              <select \r\n                value={itemsPerPage} \r\n                onChange={handleItemsPerPageChange}\r\n                className=\"items-select form-input\"\r\n              >\r\n                <option value=\"5\">5</option>\r\n                <option value=\"10\">10</option>\r\n                <option value=\"25\">25</option>\r\n                <option value=\"50\">50</option>\r\n                <option value=\"100\">100</option>\r\n              </select>\r\n              <span>per page</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        {filteredData.length !== displayData.length && (\r\n          <p className=\"remaining-info\">\r\n            Displaying only {displayData.length} of {filteredData.length} records (remaining have already been copied).\r\n          </p>\r\n        )}\r\n      </div>\r\n      \r\n      {/* Show Codes Modal */}\r\n      {showCodesModal && (\r\n        <div className=\"modal-overlay\" onClick={() => setShowCodesModal(false)}>\r\n          <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n            <div className=\"modal-header\">\r\n              <h3>Card Codes ({filteredData.length} total)</h3>\r\n              <button \r\n                className=\"modal-close\"\r\n                onClick={() => setShowCodesModal(false)}\r\n                title=\"Close modal\"\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n            \r\n            <div className=\"modal-controls\">\r\n              <div className=\"modal-format-toggle\">\r\n                <button\r\n                  onClick={() => setCodesDisplayFormat('50per')}\r\n                  className={`btn ${codesDisplayFormat === '50per' ? 'btn-primary' : 'btn-secondary'}`}\r\n                >\r\n                  50 per line\r\n                </button>\r\n                <button\r\n                  onClick={() => setCodesDisplayFormat('1per')}\r\n                  className={`btn ${codesDisplayFormat === '1per' ? 'btn-primary' : 'btn-secondary'}`}\r\n                >\r\n                  1 per line\r\n                </button>\r\n              </div>\r\n              \r\n              <button\r\n                onClick={copyCodesFromModal}\r\n                className=\"btn btn-success\"\r\n                title=\"Copy all codes to clipboard\"\r\n              >\r\n                Copy All\r\n              </button>\r\n            </div>\r\n            \r\n            <div className=\"modal-body\">\r\n              <textarea\r\n                className=\"codes-textarea\"\r\n                value={generateCodesForDisplay()}\r\n                readOnly\r\n                rows={15}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardFilterApp;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}