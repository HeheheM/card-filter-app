{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CardFilterApp","file","setFile","useState","data","setData","filteredData","setFilteredData","displayData","setDisplayData","loading","setLoading","copyBatch","setCopyBatch","singleCopyIndex","setSingleCopyIndex","copiedAll","setCopiedAll","singleCopiedAll","setSingleCopiedAll","prefix","setPrefix","isDarkTheme","setIsDarkTheme","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","sortField","setSortField","sortDirection","setSortDirection","csvUrl","setCsvUrl","inputMethod","setInputMethod","urlError","setUrlError","filters","setFilters","codes","series","numberFrom","numberTo","wishlistsFrom","wishlistsTo","editions","morphed","trimmed","frame","hasDyeName","tag","noneTag","blacklistSeries","blacklistCharacter","blacklistTag","excludeFrame","excludeMorphed","excludeTrimmed","excludeDyeName","notFoundCodes","setNotFoundCodes","showCodesModal","setShowCodesModal","codesDisplayFormat","setCodesDisplayFormat","totalPages","Math","ceil","length","handleSort","field","useEffect","document","title","applyTheme","dark","body","classList","add","remove","readFileContent","Promise","resolve","reject","reader","FileReader","onload","event","target","result","onerror","error","readAsText","applyFilters","results","trim","searchCodes","toLowerCase","split","map","code","filter","foundCodes","notFound","codeResults","forEach","searchCode","matchingCards","card","push","includedSeries","s","cardSeries","some","includes","parseInt","number","wishlists","edition","blacklistedSeries","blacklistedCharacters","c","cardCharacter","character","blacklistedTags","t","cardTag","handleFilterChange","e","name","value","type","checked","_objectSpread","[object Object]","resetFilters","generateCodesForDisplay","maxCodesPerLine","content","i","batch","slice","join","concat","React","createElement","className","onChange","toggleTheme","newTheme","id","htmlFor","accept","async","uploadedFile","files","Papa","parse","header","complete","console","placeholder","style","flex","onClick","endsWith","log","proxyUrl","encodeURIComponent","response","fetch","ok","Error","status","csvContent","text","errors","warn","message","disabled","Set","sort","a","b","key","newEditions","index","indexOf","splice","handleEditionChange","copyCardCodes","totalBatches","startIndex","endIndex","min","cardsToCopy","navigator","clipboard","writeText","alert","newDisplayData","copiedCard","getCopyButtonText","copyCardCodesOneLine","cardToCopy","downloadCardCodes","blob","Blob","url","URL","createObjectURL","href","download","appendChild","click","removeChild","revokeObjectURL","downloadCardCodesOneLine","getCurrentPageItems","sortedData","aVal","bVal","localeCompare","getSortedData","quality","goToFirstPage","goToPreviousPage","prev","max","isNaN","goToNextPage","goToLastPage","stopPropagation","copyCodesFromModal","readOnly","rows","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.07c2ba82.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport './styles.css';\n\nconst CardFilterApp = () => {\n  const [file, setFile] = useState(null);\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [displayData, setDisplayData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [copyBatch, setCopyBatch] = useState(0);\n  const [singleCopyIndex, setSingleCopyIndex] = useState(0);\n  const [copiedAll, setCopiedAll] = useState(false);\n  const [singleCopiedAll, setSingleCopiedAll] = useState(false);\n  const [prefix, setPrefix] = useState('');\n  const [isDarkTheme, setIsDarkTheme] = useState(true); // Default to dark theme\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10); // Default 10 items per page\n  const [sortField, setSortField] = useState(null);\n  const [sortDirection, setSortDirection] = useState('asc');\n  const [csvUrl, setCsvUrl] = useState('');\n  const [inputMethod, setInputMethod] = useState('file'); // 'file' or 'url'\n  const [urlError, setUrlError] = useState('');\n  const [filters, setFilters] = useState({\n    codes: '', // New field for card codes search\n    series: '',\n    numberFrom: '',\n    numberTo: '',\n    wishlistsFrom: '',\n    wishlistsTo: '',\n    editions: [],\n    morphed: false,\n    trimmed: false,\n    frame: false,\n    hasDyeName: false,\n    tag: '',\n    noneTag: false,\n    // Blacklist filters\n    blacklistSeries: '',\n    blacklistCharacter: '',\n    blacklistTag: '',\n    excludeFrame: false,\n    excludeMorphed: false,\n    excludeTrimmed: false,\n    excludeDyeName: false\n  });\n  const [notFoundCodes, setNotFoundCodes] = useState([]);\n  const [showCodesModal, setShowCodesModal] = useState(false);\n  const [codesDisplayFormat, setCodesDisplayFormat] = useState('50per'); // '50per' or '1per'\n  \n  // Calculate the total number of pages\n  const totalPages = Math.ceil(displayData.length / itemsPerPage);\n  \n  // Sort function\n  const handleSort = (field) => {\n    // If clicking the same field, toggle direction or reset\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else {\n        // Reset sorting\n        setSortField(null);\n        setSortDirection('asc');\n      }\n    } else {\n      // New field, start with ascending\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n  \n  // Apply sorting to data\n  const getSortedData = (data) => {\n    if (!sortField) return data;\n    \n    const sortedData = [...data];\n    \n    sortedData.sort((a, b) => {\n      // Handle numeric fields\n      if (['number', 'wishlists', 'edition', 'worker.effort'].includes(sortField)) {\n        const aVal = parseInt(a[sortField]) || 0;\n        const bVal = parseInt(b[sortField]) || 0;\n        \n        return sortDirection === 'asc' ? aVal - bVal : bVal - aVal;\n      }\n      \n      // Handle string fields\n      const aVal = a[sortField] || '';\n      const bVal = b[sortField] || '';\n      \n      if (sortDirection === 'asc') {\n        return aVal.localeCompare(bVal);\n      } else {\n        return bVal.localeCompare(aVal);\n      }\n    });\n    \n    return sortedData;\n  };\n  \n  // Get current page items\n  const getCurrentPageItems = () => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    const sortedData = getSortedData(displayData);\n    return sortedData.slice(startIndex, endIndex);\n  };\n  \n  // Pagination controls\n  const goToFirstPage = () => setCurrentPage(1);\n  const goToPreviousPage = () => setCurrentPage(prev => Math.max(prev - 1, 1));\n  const goToNextPage = () => setCurrentPage(prev => Math.min(prev + 1, totalPages));\n  const goToLastPage = () => setCurrentPage(totalPages);\n  \n  // Handle direct page input\n  const handlePageInput = (e) => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value >= 1 && value <= totalPages) {\n      setCurrentPage(value);\n    }\n  };\n  \n  // Handle items per page change\n  const handleItemsPerPageChange = (e) => {\n    const value = parseInt(e.target.value);\n    setItemsPerPage(value);\n    setCurrentPage(1); // Reset to first page when changing items per page\n  };\n  \n  // Set document title\n  useEffect(() => {\n    document.title = \"Karuta Cards Tool\";\n  }, []);\n  \n  // Theme toggle effect\n  useEffect(() => {\n    // Apply theme class to document\n    applyTheme(isDarkTheme);\n  }, []);\n  \n  // Function to apply the theme\n  const applyTheme = (dark) => {\n    if (dark) {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    }\n  };\n  \n  // Function to toggle theme\n  const toggleTheme = () => {\n    const newTheme = !isDarkTheme;\n    setIsDarkTheme(newTheme);\n    applyTheme(newTheme);\n  };\n  \n  // Handle file upload\n  const handleFileUpload = async (event) => {\n    const uploadedFile = event.target.files[0];\n    setFile(uploadedFile);\n    \n    if (uploadedFile) {\n      setLoading(true);\n      setUrlError('');\n      const content = await readFileContent(uploadedFile);\n      \n      Papa.parse(content, {\n        header: true,\n        complete: (results) => {\n          setData(results.data);\n          setFilteredData(results.data);\n          setDisplayData(results.data);\n          setLoading(false);\n        },\n        error: (error) => {\n          console.error('Error parsing CSV:', error);\n          setLoading(false);\n        }\n      });\n    }\n  };\n  \n  // Handle URL input\n  const handleUrlLoad = async () => {\n    if (!csvUrl.trim()) {\n      setUrlError('Please enter a URL');\n      return;\n    }\n    \n    // Check if URL ends with .csv\n    if (!csvUrl.toLowerCase().endsWith('.csv')) {\n      setUrlError('URL must point to a .csv file');\n      return;\n    }\n    \n    setLoading(true);\n    setUrlError('');\n    setFile(null);\n    \n    try {\n      console.log('Loading CSV via proxy...');\n      \n      // Use working proxy directly\n      const proxyUrl = `https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(csvUrl)}`;\n      const response = await fetch(proxyUrl);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const csvContent = await response.text();\n      \n      // Check if content looks like CSV\n      if (!csvContent || csvContent.trim().length === 0) {\n        throw new Error('Empty file or invalid CSV content');\n      }\n      \n      // Check if it's actually CSV data (not an error page)\n      if (csvContent.includes('<html>') || csvContent.includes('<!DOCTYPE')) {\n        throw new Error('Received HTML instead of CSV data');\n      }\n      \n      Papa.parse(csvContent, {\n        header: true,\n        complete: (results) => {\n          if (results.errors && results.errors.length > 0) {\n            console.warn('CSV parsing warnings:', results.errors);\n          }\n          \n          if (!results.data || results.data.length === 0) {\n            setUrlError('No data found in CSV file');\n            setLoading(false);\n            return;\n          }\n          \n          setData(results.data);\n          setFilteredData(results.data);\n          setDisplayData(results.data);\n          setLoading(false);\n          console.log('✅ CSV loaded successfully!');\n        },\n        error: (error) => {\n          console.error('Error parsing CSV:', error);\n          setUrlError('Error parsing CSV file - please check if the file format is correct');\n          setLoading(false);\n        }\n      });\n      \n    } catch (error) {\n      console.error('❌ Error loading CSV:', error.message);\n      setUrlError(`❌ Unable to load CSV from URL: ${error.message}\\n\\n✅ Please try:\\n1. Check if the URL is correct and accessible\\n2. Download the file directly and use \"Upload File\"`);\n      setLoading(false);\n    }\n  };\n  \n  // Read file content\n  const readFileContent = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = (error) => reject(error);\n      reader.readAsText(file);\n    });\n  };\n  \n  // Initialize empty state - no automatic data loading\n  useEffect(() => {\n    // Only process data if a file has been selected by the user\n    if (file) {\n      const processCSVData = (csvText) => {\n        Papa.parse(csvText, {\n          header: true,\n          complete: (results) => {\n            setData(results.data);\n            setFilteredData(results.data);\n            setDisplayData(results.data);\n          },\n          error: (error) => {\n            console.error('Error parsing CSV:', error);\n          }\n        });\n      };\n      \n      // If needed in the future, process file data here\n    } else {\n      // Reset data states when no file is loaded\n      setData([]);\n      setFilteredData([]);\n      setDisplayData([]);\n    }\n  }, [file]);\n  \n  // Apply filters function\n  const applyFilters = () => {\n    let results = [...data];\n    \n    // Filter by card codes (if specified)\n    if (filters.codes.trim()) {\n      const searchCodes = filters.codes.toLowerCase().split(',').map(code => code.trim()).filter(code => code.length > 0);\n      const foundCodes = [];\n      const notFound = [];\n      \n      // Find cards that match the specified codes\n      const codeResults = [];\n      searchCodes.forEach(searchCode => {\n        const matchingCards = data.filter(card => card.code.toLowerCase() === searchCode);\n        if (matchingCards.length > 0) {\n          codeResults.push(...matchingCards);\n          foundCodes.push(searchCode);\n        } else {\n          notFound.push(searchCode);\n        }\n      });\n      \n      results = codeResults;\n      setNotFoundCodes(notFound);\n    } else {\n      setNotFoundCodes([]);\n    }\n    \n    // If codes filter is active, skip other filters (codes take priority)\n    if (!filters.codes.trim()) {\n      // Filter by series\n      if (filters.series) {\n        // Allow multiple series names separated by commas\n        const includedSeries = filters.series.toLowerCase().split(',').map(s => s.trim());\n        results = results.filter(card => {\n          const cardSeries = card.series.toLowerCase();\n          return includedSeries.some(series => cardSeries.includes(series));\n        });\n      }\n      \n      // Filter by number range\n      if (filters.numberFrom) {\n        results = results.filter(card => \n          parseInt(card.number) >= parseInt(filters.numberFrom)\n        );\n      }\n      \n      if (filters.numberTo) {\n        results = results.filter(card => \n          parseInt(card.number) <= parseInt(filters.numberTo)\n        );\n      }\n      \n      // Filter by wishlists range\n      if (filters.wishlistsFrom) {\n        results = results.filter(card => \n          parseInt(card.wishlists) >= parseInt(filters.wishlistsFrom)\n        );\n      }\n      \n      if (filters.wishlistsTo) {\n        results = results.filter(card => \n          parseInt(card.wishlists) <= parseInt(filters.wishlistsTo)\n        );\n      }\n      \n      // Filter by editions\n      if (filters.editions.length > 0) {\n        results = results.filter(card => \n          filters.editions.includes(card.edition)\n        );\n      }\n      \n      // Filter by morphed\n      if (filters.morphed) {\n        results = results.filter(card => card.morphed === \"Yes\");\n      }\n      \n      // Filter by trimmed\n      if (filters.trimmed) {\n        results = results.filter(card => card.trimmed === \"Yes\");\n      }\n      \n      // Filter by frame\n      if (filters.frame) {\n        results = results.filter(card => card.frame !== \"\");\n      }\n      \n      // Filter by dye.name\n      if (filters.hasDyeName) {\n        results = results.filter(card => card[\"dye.name\"] !== \"\");\n      }\n      \n      // Filter by tag\n      if (filters.tag) {\n        results = results.filter(card => \n          card.tag.toLowerCase().includes(filters.tag.toLowerCase())\n        );\n      }\n      \n      // Filter for cards with no tag\n      if (filters.noneTag) {\n        results = results.filter(card => \n          !card.tag || card.tag.trim() === ''\n        );\n      }\n      \n      // Apply blacklist filters\n      \n      // Blacklist series filter\n      if (filters.blacklistSeries) {\n        // Allow multiple series names separated by commas\n        const blacklistedSeries = filters.blacklistSeries.toLowerCase().split(',').map(s => s.trim());\n        results = results.filter(card => {\n          const cardSeries = card.series.toLowerCase();\n          return !blacklistedSeries.some(series => cardSeries.includes(series));\n        });\n      }\n      \n      // Blacklist character filter\n      if (filters.blacklistCharacter) {\n        // Allow multiple character names separated by commas\n        const blacklistedCharacters = filters.blacklistCharacter.toLowerCase().split(',').map(c => c.trim());\n        results = results.filter(card => {\n          const cardCharacter = card.character.toLowerCase();\n          return !blacklistedCharacters.some(character => cardCharacter.includes(character));\n        });\n      }\n      \n      // Blacklist tag filter\n      if (filters.blacklistTag) {\n        // Allow multiple tags separated by commas\n        const blacklistedTags = filters.blacklistTag.toLowerCase().split(',').map(t => t.trim());\n        results = results.filter(card => {\n          const cardTag = (card.tag || '').toLowerCase();\n          return !blacklistedTags.some(tag => cardTag.includes(tag));\n        });\n      }\n      \n      // Exclude cards with frame\n      if (filters.excludeFrame) {\n        results = results.filter(card => !card.frame || card.frame.trim() === '');\n      }\n      \n      // Exclude morphed cards\n      if (filters.excludeMorphed) {\n        results = results.filter(card => card.morphed !== \"Yes\");\n      }\n      \n      // Exclude trimmed cards\n      if (filters.excludeTrimmed) {\n        results = results.filter(card => card.trimmed !== \"Yes\");\n      }\n      \n      // Exclude cards with dye.name\n      if (filters.excludeDyeName) {\n        results = results.filter(card => !card[\"dye.name\"] || card[\"dye.name\"].trim() === '');\n      }\n    }\n    \n    setFilteredData(results);\n    setDisplayData(results);\n    // Reset pagination when filters change\n    setCurrentPage(1);\n    // Reset copy batch when filters change\n    setCopyBatch(0);\n    setCopiedAll(false);\n  };\n  \n  // Handle filter changes - back to manual filtering\n  const handleFilterChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    \n    setFilters({\n      ...filters,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n  \n  // Handle edition selection - back to manual filtering\n  const handleEditionChange = (edition) => {\n    const newEditions = [...filters.editions];\n    \n    if (newEditions.includes(edition)) {\n      const index = newEditions.indexOf(edition);\n      newEditions.splice(index, 1);\n    } else {\n      newEditions.push(edition);\n    }\n    \n    setFilters({\n      ...filters,\n      editions: newEditions\n    });\n  };\n  \n  // Reset filters\n  const resetFilters = () => {\n    setFilters({\n      codes: '', // Reset codes filter\n      series: '',\n      numberFrom: '',\n      numberTo: '',\n      wishlistsFrom: '',\n      wishlistsTo: '',\n      editions: [],\n      morphed: false,\n      trimmed: false,\n      frame: false,\n      hasDyeName: false,\n      tag: '',\n      noneTag: false,\n      // Reset blacklist filters\n      blacklistSeries: '',\n      blacklistCharacter: '',\n      blacklistTag: '',\n      excludeFrame: false,\n      excludeMorphed: false,\n      excludeTrimmed: false,\n      excludeDyeName: false\n    });\n    \n    // Reset sorting\n    setSortField(null);\n    setSortDirection('asc');\n    \n    // Clear not found codes\n    setNotFoundCodes([]);\n    \n    setFilteredData(data);\n    setDisplayData(data);\n    setCopyBatch(0);\n    setCopiedAll(false);\n    setSingleCopyIndex(0);\n    setSingleCopiedAll(false);\n  };\n  \n  // Copy card codes to clipboard - updated to handle batches and remove copied cards\n  const copyCardCodes = () => {\n    const batchSize = 50;\n    const totalBatches = Math.ceil(filteredData.length / batchSize);\n    \n    // If we've copied all batches, reset to beginning and restore display\n    if (copyBatch >= totalBatches || copiedAll) {\n      setCopyBatch(0);\n      setCopiedAll(false);\n      setDisplayData([...filteredData]);\n      return;\n    }\n    \n    const startIndex = copyBatch * batchSize;\n    const endIndex = Math.min(startIndex + batchSize, filteredData.length);\n    const cardsToCopy = filteredData.slice(startIndex, endIndex);\n    \n    // Add prefix if it exists\n    let codes;\n    if (prefix.trim()) {\n      codes = cardsToCopy.map(card => `${prefix} ${card.code}`).join(', ');\n    } else {\n      codes = cardsToCopy.map(card => card.code).join(', ');\n    }\n    \n    navigator.clipboard.writeText(codes);\n    alert(`Copied codes ${startIndex+1}-${endIndex} of ${filteredData.length}`)\n    \n    // Remove copied cards from display\n    const newDisplayData = displayData.filter(card => \n      !cardsToCopy.some(copiedCard => copiedCard.code === card.code)\n    );\n    \n    setDisplayData(newDisplayData);\n    \n    // Move to next batch\n    setCopyBatch(copyBatch + 1);\n    \n    // If we've copied all, mark as completed\n    if (endIndex >= filteredData.length) {\n      setCopiedAll(true);\n    }\n  };\n\n  // Copy card codes to clipboard (one card at a time)\n  const copyCardCodesOneLine = () => {\n    // If we've copied all cards, reset to beginning and restore display\n    if (filteredData.length === 0 || singleCopyIndex >= filteredData.length || singleCopiedAll) {\n      setSingleCopyIndex(0);\n      setSingleCopiedAll(false);\n      setDisplayData([...filteredData]);\n      return;\n    }\n    \n    // Get the single card to copy\n    const cardToCopy = filteredData[singleCopyIndex];\n    \n    // Add prefix if it exists, for a single code\n    let code;\n    if (prefix.trim()) {\n      code = `${prefix} ${cardToCopy.code}`;\n    } else {\n      code = cardToCopy.code;\n    }\n    \n    navigator.clipboard.writeText(code);\n    alert(`Copied code ${singleCopyIndex+1} of ${filteredData.length}: ${cardToCopy.code}`);\n    \n    // Remove only this copied card from display\n    const newDisplayData = displayData.filter(card => card.code !== cardToCopy.code);\n    setDisplayData(newDisplayData);\n    \n    // Move to next card\n    setSingleCopyIndex(singleCopyIndex + 1);\n    \n    // If we've copied all, mark as completed\n    if (singleCopyIndex + 1 >= filteredData.length) {\n      setSingleCopiedAll(true);\n    }\n  };\n  \n  // Download card codes as text file\n  const downloadCardCodes = () => {\n    const maxCodesPerLine = 50;\n    let content = '';\n    \n    for (let i = 0; i < filteredData.length; i += maxCodesPerLine) {\n      const batch = filteredData.slice(i, i + maxCodesPerLine);\n      \n      // Add prefix if it exists\n      if (prefix.trim()) {\n        content += prefix + ' ' + batch.map(card => card.code).join(', ') + '\\n';\n      } else {\n        content += batch.map(card => card.code).join(', ') + '\\n';\n      }\n    }\n    \n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'card_codes.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // Download card codes as text file (one per line)\n  const downloadCardCodesOneLine = () => {\n    let content = '';\n    \n    // Add prefix if it exists, one code per line\n    if (prefix.trim()) {\n      content = filteredData.map(card => `${prefix} ${card.code}`).join('\\n');\n    } else {\n      content = filteredData.map(card => card.code).join('\\n');\n    }\n    \n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'card_codes_one_per_line.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  \n  // Get unique editions\n  const getUniqueEditions = () => {\n    if (data.length === 0) return [];\n    \n    const editions = [...new Set(data.map(card => card.edition))];\n    return editions.sort((a, b) => parseInt(a) - parseInt(b));\n  };\n  \n  // Get copy button text\n  const getCopyButtonText = () => {\n    const batchSize = 50;\n    const totalBatches = Math.ceil(filteredData.length / batchSize);\n    \n    if (filteredData.length === 0) {\n      return \"Copy Codes (max 50)\";\n    }\n    \n    // If we've copied all batches or marked as copied all, show that we're starting over\n    if (copyBatch >= totalBatches || copiedAll) {\n      return \"Restore & Start Over\";\n    }\n    \n    const startIndex = copyBatch * batchSize;\n    const endIndex = Math.min(startIndex + batchSize, filteredData.length);\n    \n    return `Copy Codes (${startIndex}/${filteredData.length})`;\n  };\n  \n  // Get single copy button text\n  const getSingleCopyButtonText = () => {\n    if (filteredData.length === 0) {\n      return \"Copy Single Code\";\n    }\n    \n    // If we've copied all cards or marked as single copied all, show that we're starting over\n    if (singleCopyIndex >= filteredData.length || singleCopiedAll) {\n      return \"Restore & Start Over\";\n    }\n    \n    return `Copy Single Code (${singleCopyIndex}/${filteredData.length})`;\n  };\n  \n  // Generate codes for display in modal\n  const generateCodesForDisplay = () => {\n    if (filteredData.length === 0) return '';\n    \n    if (codesDisplayFormat === '50per') {\n      const maxCodesPerLine = 50;\n      let content = '';\n      \n      for (let i = 0; i < filteredData.length; i += maxCodesPerLine) {\n        const batch = filteredData.slice(i, i + maxCodesPerLine);\n        \n        // Add prefix if it exists\n        if (prefix.trim()) {\n          content += prefix + ' ' + batch.map(card => card.code).join(', ') + '\\n';\n        } else {\n          content += batch.map(card => card.code).join(', ') + '\\n';\n        }\n      }\n      \n      return content.trim();\n    } else {\n      // 1 per line format\n      if (prefix.trim()) {\n        return filteredData.map(card => `${prefix} ${card.code}`).join('\\n');\n      } else {\n        return filteredData.map(card => card.code).join('\\n');\n      }\n    }\n  };\n  \n  // Copy codes from modal to clipboard\n  const copyCodesFromModal = () => {\n    const codes = generateCodesForDisplay();\n    navigator.clipboard.writeText(codes);\n    alert(`Copied ${filteredData.length} codes to clipboard!`);\n  };\n  \n  return (\n    <div className=\"container\">\n      {/* Theme Toggle Switch */}\n      <div className=\"theme-switch-container\">\n        <span className=\"theme-icon\">☀️</span>\n        <label className=\"theme-switch\">\n          <input \n            type=\"checkbox\" \n            checked={isDarkTheme}\n            onChange={toggleTheme}\n          />\n          <span className=\"slider\"></span>\n        </label>\n        <span className=\"theme-icon\">🌙</span>\n      </div>\n      \n      <h1 className=\"header\">Card Filter Application</h1>\n      \n      {/* File upload */}\n      <div className=\"card\">\n        <h2>Load CSV Data</h2>\n        \n        {/* Input method selection */}\n        <div className=\"form-group\">\n          <label className=\"form-label\">Choose input method:</label>\n          <div className=\"flex gap-4\">\n            <div className=\"checkbox-container\">\n              <input\n                type=\"radio\"\n                id=\"file-method\"\n                name=\"input-method\"\n                checked={inputMethod === 'file'}\n                onChange={() => {\n                  setInputMethod('file');\n                  setCsvUrl('');\n                  setUrlError('');\n                }}\n                className=\"checkbox\"\n              />\n              <label htmlFor=\"file-method\" className=\"checkbox-label\">\n                Upload File\n              </label>\n            </div>\n            \n            <div className=\"checkbox-container\">\n              <input\n                type=\"radio\"\n                id=\"url-method\"\n                name=\"input-method\"\n                checked={inputMethod === 'url'}\n                onChange={() => {\n                  setInputMethod('url');\n                  setFile(null);\n                }}\n                className=\"checkbox\"\n              />\n              <label htmlFor=\"url-method\" className=\"checkbox-label\">\n                Load from URL\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        {/* File upload section */}\n        {inputMethod === 'file' && (\n          <div className=\"form-group\">\n            <label className=\"form-label\">Select CSV or TXT file:</label>\n            <input \n              type=\"file\" \n              accept=\".csv, .txt\" \n              onChange={handleFileUpload} \n              className=\"form-input\"\n            />\n          </div>\n        )}\n        \n        {/* URL input section */}\n        {inputMethod === 'url' && (\n          <div className=\"form-group\">\n            <label className=\"form-label\">CSV file URL:</label>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"url\"\n                value={csvUrl}\n                onChange={(e) => setCsvUrl(e.target.value)}\n                className=\"form-input\"\n                placeholder=\"https://example.com/file.csv\"\n                style={{flex: 1}}\n              />\n              <button\n                onClick={handleUrlLoad}\n                disabled={loading}\n                className=\"btn btn-primary\"\n              >\n                {loading ? 'Loading...' : 'Load CSV'}\n              </button>\n            </div>\n            <p className=\"text-gray-500 text-sm mt-1\">\n              Enter a direct link to a CSV file. The URL must end with .csv\n            </p>\n            {urlError && (\n              <div className=\"url-error\">\n                <p className=\"text-error\">\n                  {urlError}\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n        \n        {/* Loading and status messages */}\n        {loading && <p>Loading data...</p>}\n        {!loading && data.length > 0 && (\n          <p className=\"text-success\">Loaded {data.length} records.</p>\n        )}\n        {!loading && data.length === 0 && !file && !csvUrl && (\n          <p>No data loaded. Please upload a CSV/TXT file or provide a CSV URL.</p>\n        )}\n        \n        <div className=\"form-group\">\n          <label className=\"form-label\">Prefix for card codes:</label>\n          <input\n            type=\"text\"\n            value={prefix}\n            onChange={(e) => setPrefix(e.target.value)}\n            className=\"form-input\"\n            placeholder=\"Enter prefix (e.g. 'kt t1')\"\n          />\n          <p className=\"text-gray-500 text-sm mt-1\">\n            This text will be added before each card code when copying or downloading.\n          </p>\n        </div>\n      </div>\n      \n      {/* Filters card */}\n      <div className=\"card\">\n        <h2>Filters</h2>\n        \n        {/* Include filters section */}\n        <div className=\"filter-section\">\n          <h3 className=\"filter-section-title\">Include Filters</h3>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Search by Card Codes:</label>\n            <input\n              type=\"text\"\n              name=\"codes\"\n              value={filters.codes}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter card codes separated by commas (e.g., vpvh96n, vzgrgsx)\"\n            />\n            <p className=\"text-gray-500 text-sm mt-1\">\n              Search for specific cards by their codes. This will override other filters when used.\n            </p>\n            {notFoundCodes.length > 0 && (\n              <div className=\"not-found-codes\">\n                <p className=\"text-warning\">\n                  <strong>Not found codes:</strong> {notFoundCodes.join(', ')}\n                </p>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Series:</label>\n            <input\n              type=\"text\"\n              name=\"series\"\n              value={filters.series}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter series names (comma-separated)\"\n              disabled={filters.codes.trim() !== ''}\n            />\n            {filters.series && filters.series.includes(',') && !filters.codes.trim() && (\n              <p className=\"text-info text-sm mt-1\">\n                Including series containing: {filters.series}\n              </p>\n            )}\n            {filters.codes.trim() && (\n              <p className=\"text-gray-500 text-sm mt-1\">\n                Disabled while using code search\n              </p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Number:</label>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"number\"\n                name=\"numberFrom\"\n                value={filters.numberFrom}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"From\"\n                disabled={filters.codes.trim() !== ''}\n              />\n              <input\n                type=\"number\"\n                name=\"numberTo\"\n                value={filters.numberTo}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"To\"\n                disabled={filters.codes.trim() !== ''}\n              />\n            </div>\n            {filters.codes.trim() && (\n              <p className=\"text-gray-500 text-sm mt-1\">\n                Disabled while using code search\n              </p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Wishlists:</label>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"number\"\n                name=\"wishlistsFrom\"\n                value={filters.wishlistsFrom}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"From\"\n                disabled={filters.codes.trim() !== ''}\n              />\n              <input\n                type=\"number\"\n                name=\"wishlistsTo\"\n                value={filters.wishlistsTo}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"To\"\n                disabled={filters.codes.trim() !== ''}\n              />\n            </div>\n            {filters.codes.trim() && (\n              <p className=\"text-gray-500 text-sm mt-1\">\n                Disabled while using code search\n              </p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Tag:</label>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                name=\"tag\"\n                value={filters.tag}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"Enter tag...\"\n                disabled={filters.noneTag || filters.codes.trim() !== ''}\n              />\n              <button\n                onClick={() => setFilters({...filters, noneTag: !filters.noneTag, tag: filters.noneTag ? filters.tag : ''})}\n                className={`btn ${filters.noneTag ? 'btn-primary' : 'btn-secondary'}`}\n                title=\"Show only cards with no tag\"\n                disabled={filters.codes.trim() !== ''}\n              >\n                None Tag\n              </button>\n            </div>\n            {filters.noneTag && !filters.codes.trim() && (\n              <p className=\"text-info text-sm mt-1\">\n                Showing only cards with no tag. Tag search is disabled.\n              </p>\n            )}\n            {filters.codes.trim() && (\n              <p className=\"text-gray-500 text-sm mt-1\">\n                Disabled while using code search\n              </p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Editions:</label>\n            <div className=\"flex flex-wrap gap-2\">\n              {getUniqueEditions().map((edition) => (\n                <button\n                  key={edition}\n                  onClick={() => !filters.codes.trim() && handleEditionChange(edition)}\n                  className={`chip ${\n                    filters.editions.includes(edition)\n                      ? 'chip-blue'\n                      : 'chip-gray'\n                  } ${filters.codes.trim() ? 'opacity-50 cursor-not-allowed' : ''}`}\n                  disabled={filters.codes.trim() !== ''}\n                >\n                  {edition}\n                </button>\n              ))}\n            </div>\n            {filters.codes.trim() && (\n              <p className=\"text-gray-500 text-sm mt-1\">\n                Disabled while using code search\n              </p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <div className=\"flex flex-wrap gap-2\">\n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"morphed\"\n                  name=\"morphed\"\n                  checked={filters.morphed}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                  disabled={filters.codes.trim() !== ''}\n                />\n                <label htmlFor=\"morphed\" className={`checkbox-label ${filters.codes.trim() ? 'opacity-50' : ''}`}>\n                  Morphed\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"trimmed\"\n                  name=\"trimmed\"\n                  checked={filters.trimmed}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                  disabled={filters.codes.trim() !== ''}\n                />\n                <label htmlFor=\"trimmed\" className={`checkbox-label ${filters.codes.trim() ? 'opacity-50' : ''}`}>\n                  Trimmed\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"frame\"\n                  name=\"frame\"\n                  checked={filters.frame}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                  disabled={filters.codes.trim() !== ''}\n                />\n                <label htmlFor=\"frame\" className={`checkbox-label ${filters.codes.trim() ? 'opacity-50' : ''}`}>\n                  With Frame\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"hasDyeName\"\n                  name=\"hasDyeName\"\n                  checked={filters.hasDyeName}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                  disabled={filters.codes.trim() !== ''}\n                />\n                <label htmlFor=\"hasDyeName\" className={`checkbox-label ${filters.codes.trim() ? 'opacity-50' : ''}`}>\n                  With dye.name\n                </label>\n              </div>\n            </div>\n            {filters.codes.trim() && (\n              <p className=\"text-gray-500 text-sm mt-1\">\n                Disabled while using code search\n              </p>\n            )}\n          </div>\n          \n          <div className=\"flex gap-2 mt-4\">\n            <button\n              onClick={applyFilters}\n              className=\"btn btn-primary\"\n            >\n              Apply Filters\n            </button>\n            <button\n              onClick={resetFilters}\n              className=\"btn btn-secondary\"\n            >\n              Reset Filters\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"filter-section-divider\"></div>\n        \n        {/* Exclude filters section */}\n        <div className=\"filter-section\">\n          <h3 className=\"filter-section-title\">Exclude Filters (Blacklist)</h3>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Exclude Series:</label>\n            <input\n              type=\"text\"\n              name=\"blacklistSeries\"\n              value={filters.blacklistSeries}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter series to exclude (comma-separated)\"\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Exclude Characters:</label>\n            <input\n              type=\"text\"\n              name=\"blacklistCharacter\"\n              value={filters.blacklistCharacter}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter characters to exclude (comma-separated)\"\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Exclude Tags:</label>\n            <input\n              type=\"text\"\n              name=\"blacklistTag\"\n              value={filters.blacklistTag}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter tags to exclude (comma-separated)\"\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <div className=\"flex flex-wrap gap-2\">\n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"excludeFrame\"\n                  name=\"excludeFrame\"\n                  checked={filters.excludeFrame}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"excludeFrame\" className=\"checkbox-label\">\n                  Exclude Cards with Frame\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"excludeMorphed\"\n                  name=\"excludeMorphed\"\n                  checked={filters.excludeMorphed}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"excludeMorphed\" className=\"checkbox-label\">\n                  Exclude Morphed Cards\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"excludeTrimmed\"\n                  name=\"excludeTrimmed\"\n                  checked={filters.excludeTrimmed}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"excludeTrimmed\" className=\"checkbox-label\">\n                  Exclude Trimmed Cards\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"excludeDyeName\"\n                  name=\"excludeDyeName\"\n                  checked={filters.excludeDyeName}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"excludeDyeName\" className=\"checkbox-label\">\n                  Exclude Cards with dye.name\n                </label>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2 mt-4\">\n            <button\n              onClick={applyFilters}\n              className=\"btn btn-primary\"\n            >\n              Apply Filters\n            </button>\n            <button\n              onClick={resetFilters}\n              className=\"btn btn-secondary\"\n            >\n              Reset Filters\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Results section */}\n      <div className=\"card\">\n        <div className=\"results-header\">\n          <h2>Results {data.length > 0 ? `(${displayData.length}/${filteredData.length})` : \"\"}</h2>\n          <div className=\"results-actions\">\n            <button\n              onClick={copyCardCodes}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-success'\n              }`}\n              title=\"Copy up to 50 codes separated by commas\"\n            >\n              <span className=\"btn-text-full\">{getCopyButtonText()}</span>\n              <span className=\"btn-text-short\">Copy 50</span>\n            </button>\n            <button\n              onClick={copyCardCodesOneLine}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-success'\n              }`}\n              title=\"Copy a single code at a time\"\n            >\n              <span className=\"btn-text-full\">{getSingleCopyButtonText()}</span>\n              <span className=\"btn-text-short\">Copy 1</span>\n            </button>\n            <button\n              onClick={downloadCardCodes}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-purple'\n              }`}\n              title=\"Download with up to 50 codes per line\"\n            >\n              <span className=\"btn-text-full\">Download (50 max)</span>\n              <span className=\"btn-text-short\">DL 50</span>\n            </button>\n            <button\n              onClick={downloadCardCodesOneLine}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-purple'\n              }`}\n              title=\"Download with one code per line\"\n            >\n              <span className=\"btn-text-full\">Download (1 per line)</span>\n              <span className=\"btn-text-short\">DL 1</span>\n            </button>\n            <button\n              onClick={() => setShowCodesModal(true)}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-info'\n              }`}\n              title=\"Show codes in a modal window\"\n            >\n              <span className=\"btn-text-full\">Show Codes</span>\n              <span className=\"btn-text-short\">Show</span>\n            </button>\n          </div>\n        </div>\n        \n        {/* Results table */}\n        {displayData.length > 0 ? (\n          <div className=\"table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th onClick={() => handleSort('code')} className=\"sortable-header\">\n                    Code {sortField === 'code' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('number')} className=\"sortable-header\">\n                    Number {sortField === 'number' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('edition')} className=\"sortable-header\">\n                    Edition {sortField === 'edition' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('character')} className=\"sortable-header\">\n                    Character {sortField === 'character' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('series')} className=\"sortable-header\">\n                    Series {sortField === 'series' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('quality')} className=\"sortable-header\">\n                    Quality {sortField === 'quality' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('wishlists')} className=\"sortable-header\">\n                    Wishlists {sortField === 'wishlists' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('worker.effort')} className=\"sortable-header\">\n                    Worker Effort {sortField === 'worker.effort' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('frame')} className=\"sortable-header\">\n                    Frame {sortField === 'frame' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('tag')} className=\"sortable-header\">\n                    Tag {sortField === 'tag' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {getCurrentPageItems().map((card, index) => (\n                  <tr key={index}>\n                    <td className=\"code-cell\">{card.code}</td>\n                    <td>{card.number}</td>\n                    <td>{card.edition}</td>\n                    <td>{card.character}</td>\n                    <td>{card.series}</td>\n                    <td>{card.quality}</td>\n                    <td>{card.wishlists}</td>\n                    <td>{card['worker.effort'] || \"0\"}</td>\n                    <td>{card.frame || \"—\"}</td>\n                    <td>{card.tag}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <p className=\"no-results\">\n            {file ? \"No results matching the filter criteria.\" : \"No data loaded. Please upload a file to see results.\"}\n          </p>\n        )}\n        \n        {/* Pagination controls */}\n        {displayData.length > 0 && (\n          <div className=\"pagination-container\">\n            <button \n              onClick={goToFirstPage} \n              disabled={currentPage === 1}\n              className={`btn ${currentPage === 1 ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"First Page\"\n            >\n              &laquo;\n            </button>\n            <button \n              onClick={goToPreviousPage} \n              disabled={currentPage === 1}\n              className={`btn ${currentPage === 1 ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"Previous Page\"\n            >\n              &lsaquo;\n            </button>\n            \n            <div className=\"page-info\">\n              <span>Page</span>\n              <input \n                type=\"number\" \n                min=\"1\" \n                max={totalPages} \n                value={currentPage}\n                onChange={handlePageInput}\n                className=\"page-input form-input\"\n              />\n              <span>of {totalPages}</span>\n            </div>\n            \n            <button \n              onClick={goToNextPage} \n              disabled={currentPage === totalPages}\n              className={`btn ${currentPage === totalPages ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"Next Page\"\n            >\n              &rsaquo;\n            </button>\n            <button \n              onClick={goToLastPage} \n              disabled={currentPage === totalPages}\n              className={`btn ${currentPage === totalPages ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"Last Page\"\n            >\n              &raquo;\n            </button>\n            \n            <div className=\"items-per-page\">\n              <span>Show</span>\n              <select \n                value={itemsPerPage} \n                onChange={handleItemsPerPageChange}\n                className=\"items-select form-input\"\n              >\n                <option value=\"5\">5</option>\n                <option value=\"10\">10</option>\n                <option value=\"25\">25</option>\n                <option value=\"50\">50</option>\n                <option value=\"100\">100</option>\n              </select>\n              <span>per page</span>\n            </div>\n          </div>\n        )}\n        \n        {filteredData.length !== displayData.length && (\n          <p className=\"remaining-info\">\n            Displaying only {displayData.length} of {filteredData.length} records (remaining have already been copied).\n          </p>\n        )}\n      </div>\n      \n      {/* Show Codes Modal */}\n      {showCodesModal && (\n        <div className=\"modal-overlay\" onClick={() => setShowCodesModal(false)}>\n          <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"modal-header\">\n              <h3>Card Codes ({filteredData.length} total)</h3>\n              <button \n                className=\"modal-close\"\n                onClick={() => setShowCodesModal(false)}\n                title=\"Close modal\"\n              >\n                ×\n              </button>\n            </div>\n            \n            <div className=\"modal-controls\">\n              <div className=\"modal-format-toggle\">\n                <button\n                  onClick={() => setCodesDisplayFormat('50per')}\n                  className={`btn ${codesDisplayFormat === '50per' ? 'btn-primary' : 'btn-secondary'}`}\n                >\n                  50 per line\n                </button>\n                <button\n                  onClick={() => setCodesDisplayFormat('1per')}\n                  className={`btn ${codesDisplayFormat === '1per' ? 'btn-primary' : 'btn-secondary'}`}\n                >\n                  1 per line\n                </button>\n              </div>\n              \n              <button\n                onClick={copyCodesFromModal}\n                className=\"btn btn-success\"\n                title=\"Copy all codes to clipboard\"\n              >\n                Copy All\n              </button>\n            </div>\n            \n            <div className=\"modal-body\">\n              <textarea\n                className=\"codes-textarea\"\n                value={generateCodesForDisplay()}\n                readOnly\n                rows={15}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CardFilterApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}