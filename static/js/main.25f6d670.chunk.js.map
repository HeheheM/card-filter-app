{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CardFilterApp","file","setFile","useState","data","setData","filteredData","setFilteredData","displayData","setDisplayData","loading","setLoading","copyBatch","setCopyBatch","copiedAll","setCopiedAll","prefix","setPrefix","isDarkTheme","setIsDarkTheme","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","filters","setFilters","series","numberFrom","numberTo","wishlistsFrom","wishlistsTo","editions","morphed","trimmed","frame","hasDyeName","tag","noneTag","totalPages","Math","ceil","length","useEffect","savedTheme","localStorage","getItem","applyTheme","dark","document","body","classList","add","remove","readFileContent","Promise","resolve","reject","reader","FileReader","onload","event","target","result","onerror","error","readAsText","handleFilterChange","e","name","value","type","checked","_objectSpread","[object Object]","React","createElement","className","onChange","toggleTheme","newTheme","setItem","accept","async","uploadedFile","files","content","Papa","parse","header","complete","results","console","placeholder","disabled","onClick","concat","title","style","fontSize","marginTop","Set","map","card","edition","sort","a","b","parseInt","key","newEditions","includes","index","indexOf","splice","push","handleEditionChange","id","htmlFor","applyFilters","filter","toLowerCase","number","wishlists","trim","resetFilters","justifyContent","marginBottom","copyCardCodes","totalBatches","startIndex","endIndex","min","cardsToCopy","slice","codes","code","join","navigator","clipboard","writeText","alert","newDisplayData","some","copiedCard","getCopyButtonText","downloadCardCodes","i","batch","blob","Blob","url","URL","createObjectURL","href","download","appendChild","click","removeChild","revokeObjectURL","overflowX","maxHeight","overflowY","getCurrentPageItems","color","fontWeight","character","quality","textAlign","padding","display","alignItems","gap","goToFirstPage","goToPreviousPage","prev","max","isNaN","width","goToNextPage","goToLastPage","marginLeft","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.25f6d670.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport './styles.css';\n\nconst CardFilterApp = () => {\n  const [file, setFile] = useState(null);\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [displayData, setDisplayData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [copyBatch, setCopyBatch] = useState(0);\n  const [copiedAll, setCopiedAll] = useState(false);\n  const [prefix, setPrefix] = useState('');\n  const [isDarkTheme, setIsDarkTheme] = useState(true); // Default to dark theme\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10); // Default 10 items per page\n  const [filters, setFilters] = useState({\n    series: '',\n    numberFrom: '',\n    numberTo: '',\n    wishlistsFrom: '',\n    wishlistsTo: '',\n    editions: [],\n    morphed: false,\n    trimmed: false,\n    frame: false,\n    hasDyeName: false,\n    tag: '',\n    noneTag: false\n  });\n  \n  // Calculate the total number of pages\n  const totalPages = Math.ceil(displayData.length / itemsPerPage);\n  \n  // Get current page items\n  const getCurrentPageItems = () => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return displayData.slice(startIndex, endIndex);\n  };\n  \n  // Pagination controls\n  const goToFirstPage = () => setCurrentPage(1);\n  const goToPreviousPage = () => setCurrentPage(prev => Math.max(prev - 1, 1));\n  const goToNextPage = () => setCurrentPage(prev => Math.min(prev + 1, totalPages));\n  const goToLastPage = () => setCurrentPage(totalPages);\n  \n  // Handle direct page input\n  const handlePageInput = (e) => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value >= 1 && value <= totalPages) {\n      setCurrentPage(value);\n    }\n  };\n  \n  // Handle items per page change\n  const handleItemsPerPageChange = (e) => {\n    const value = parseInt(e.target.value);\n    setItemsPerPage(value);\n    setCurrentPage(1); // Reset to first page when changing items per page\n  };\n  \n  // Theme toggle effect\n  useEffect(() => {\n    // Check if theme preference exists in localStorage\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setIsDarkTheme(savedTheme === 'dark');\n    }\n    \n    // Apply theme class to document\n    applyTheme(savedTheme === 'dark' || (savedTheme === null && isDarkTheme));\n  }, []);\n  \n  // Function to apply the theme\n  const applyTheme = (dark) => {\n    if (dark) {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    }\n  };\n  \n  // Function to toggle theme\n  const toggleTheme = () => {\n    const newTheme = !isDarkTheme;\n    setIsDarkTheme(newTheme);\n    applyTheme(newTheme);\n    localStorage.setItem('theme', newTheme ? 'dark' : 'light');\n  };\n  \n  // Handle file upload\n  const handleFileUpload = async (event) => {\n    const uploadedFile = event.target.files[0];\n    setFile(uploadedFile);\n    \n    if (uploadedFile) {\n      setLoading(true);\n      const content = await readFileContent(uploadedFile);\n      \n      Papa.parse(content, {\n        header: true,\n        complete: (results) => {\n          setData(results.data);\n          setFilteredData(results.data);\n          setDisplayData(results.data);\n          setLoading(false);\n        },\n        error: (error) => {\n          console.error('Error parsing CSV:', error);\n          setLoading(false);\n        }\n      });\n    }\n  };\n  \n  // Read file content\n  const readFileContent = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = (error) => reject(error);\n      reader.readAsText(file);\n    });\n  };\n  \n  // Initialize empty state - no automatic data loading\n  useEffect(() => {\n    // Only process data if a file has been selected by the user\n    if (file) {\n      const processCSVData = (csvText) => {\n        Papa.parse(csvText, {\n          header: true,\n          complete: (results) => {\n            setData(results.data);\n            setFilteredData(results.data);\n            setDisplayData(results.data);\n          },\n          error: (error) => {\n            console.error('Error parsing CSV:', error);\n          }\n        });\n      };\n      \n      // If needed in the future, process file data here\n    } else {\n      // Reset data states when no file is loaded\n      setData([]);\n      setFilteredData([]);\n      setDisplayData([]);\n    }\n  }, [file]);\n  \n  // Apply filters function\n  const applyFilters = () => {\n    let results = [...data];\n    \n    // Filter by series\n    if (filters.series) {\n      results = results.filter(card => \n        card.series.toLowerCase().includes(filters.series.toLowerCase())\n      );\n    }\n    \n    // Filter by number range\n    if (filters.numberFrom) {\n      results = results.filter(card => \n        parseInt(card.number) >= parseInt(filters.numberFrom)\n      );\n    }\n    \n    if (filters.numberTo) {\n      results = results.filter(card => \n        parseInt(card.number) <= parseInt(filters.numberTo)\n      );\n    }\n    \n    // Filter by wishlists range\n    if (filters.wishlistsFrom) {\n      results = results.filter(card => \n        parseInt(card.wishlists) >= parseInt(filters.wishlistsFrom)\n      );\n    }\n    \n    if (filters.wishlistsTo) {\n      results = results.filter(card => \n        parseInt(card.wishlists) <= parseInt(filters.wishlistsTo)\n      );\n    }\n    \n    // Filter by editions\n    if (filters.editions.length > 0) {\n      results = results.filter(card => \n        filters.editions.includes(card.edition)\n      );\n    }\n    \n    // Filter by morphed\n    if (filters.morphed) {\n      results = results.filter(card => card.morphed === \"Yes\");\n    }\n    \n    // Filter by trimmed\n    if (filters.trimmed) {\n      results = results.filter(card => card.trimmed === \"Yes\");\n    }\n    \n    // Filter by frame\n    if (filters.frame) {\n      results = results.filter(card => card.frame !== \"\");\n    }\n    \n    // Filter by dye.name\n    if (filters.hasDyeName) {\n      results = results.filter(card => card[\"dye.name\"] !== \"\");\n    }\n    \n    // Filter by tag\n    if (filters.tag) {\n      results = results.filter(card => \n        card.tag.toLowerCase().includes(filters.tag.toLowerCase())\n      );\n    }\n    \n    // Filter for cards with no tag\n    if (filters.noneTag) {\n      results = results.filter(card => \n        !card.tag || card.tag.trim() === ''\n      );\n    }\n    \n    setFilteredData(results);\n    setDisplayData(results);\n    // Reset pagination when filters change\n    setCurrentPage(1);\n    // Reset copy batch when filters change\n    setCopyBatch(0);\n    setCopiedAll(false);\n  };\n  \n  // Handle filter changes - back to manual filtering\n  const handleFilterChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    \n    setFilters({\n      ...filters,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n  \n  // Handle edition selection - back to manual filtering\n  const handleEditionChange = (edition) => {\n    const newEditions = [...filters.editions];\n    \n    if (newEditions.includes(edition)) {\n      const index = newEditions.indexOf(edition);\n      newEditions.splice(index, 1);\n    } else {\n      newEditions.push(edition);\n    }\n    \n    setFilters({\n      ...filters,\n      editions: newEditions\n    });\n  };\n  \n  // Reset filters\n  const resetFilters = () => {\n    setFilters({\n      series: '',\n      numberFrom: '',\n      numberTo: '',\n      wishlistsFrom: '',\n      wishlistsTo: '',\n      editions: [],\n      morphed: false,\n      trimmed: false,\n      frame: false,\n      hasDyeName: false,\n      tag: '',\n      noneTag: false\n    });\n    \n    setFilteredData(data);\n    setDisplayData(data);\n    setCopyBatch(0);\n    setCopiedAll(false);\n  };\n  \n  // Copy card codes to clipboard - updated to handle batches and remove copied cards\n  const copyCardCodes = () => {\n    const batchSize = 50;\n    const totalBatches = Math.ceil(filteredData.length / batchSize);\n    \n    // If we've copied all batches, reset to beginning and restore display\n    if (copyBatch >= totalBatches || copiedAll) {\n      setCopyBatch(0);\n      setCopiedAll(false);\n      setDisplayData([...filteredData]);\n      return;\n    }\n    \n    const startIndex = copyBatch * batchSize;\n    const endIndex = Math.min(startIndex + batchSize, filteredData.length);\n    const cardsToCopy = filteredData.slice(startIndex, endIndex);\n    \n    // Add prefix if it exists\n    let codes;\n    if (prefix.trim()) {\n      codes = cardsToCopy.map(card => `${prefix} ${card.code}`).join(', ');\n    } else {\n      codes = cardsToCopy.map(card => card.code).join(', ');\n    }\n    \n    navigator.clipboard.writeText(codes);\n    alert(`Copied codes ${startIndex+1}-${endIndex} of ${filteredData.length}`)\n    \n    // Remove copied cards from display\n    const newDisplayData = displayData.filter(card => \n      !cardsToCopy.some(copiedCard => copiedCard.code === card.code)\n    );\n    \n    setDisplayData(newDisplayData);\n    \n    // Move to next batch\n    setCopyBatch(copyBatch + 1);\n    \n    // If we've copied all, mark as completed\n    if (endIndex >= filteredData.length) {\n      setCopiedAll(true);\n    }\n  };\n  \n  // Download card codes as text file\n  const downloadCardCodes = () => {\n    const maxCodesPerLine = 50;\n    let content = '';\n    \n    for (let i = 0; i < filteredData.length; i += maxCodesPerLine) {\n      const batch = filteredData.slice(i, i + maxCodesPerLine);\n      \n      // Add prefix if it exists\n      if (prefix.trim()) {\n        content += prefix + ' ' + batch.map(card => card.code).join(', ') + '\\n';\n      } else {\n        content += batch.map(card => card.code).join(', ') + '\\n';\n      }\n    }\n    \n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'card_codes.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  \n  // Get unique editions\n  const getUniqueEditions = () => {\n    if (data.length === 0) return [];\n    \n    const editions = [...new Set(data.map(card => card.edition))];\n    return editions.sort((a, b) => parseInt(a) - parseInt(b));\n  };\n  \n  // Get copy button text\n  const getCopyButtonText = () => {\n    const batchSize = 50;\n    const totalBatches = Math.ceil(filteredData.length / batchSize);\n    \n    if (filteredData.length === 0) {\n      return \"Copy Codes (max 50)\";\n    }\n    \n    // If we've copied all batches or marked as copied all, show that we're starting over\n    if (copyBatch >= totalBatches || copiedAll) {\n      return \"Restore & Start Over\";\n    }\n    \n    const startIndex = copyBatch * batchSize;\n    const endIndex = Math.min(startIndex + batchSize, filteredData.length);\n    \n    return `Copy Codes (${startIndex}/${filteredData.length})`;\n  };\n  \n  return (\n    <div className=\"container\">\n      {/* Theme Toggle Switch */}\n      <div className=\"theme-switch-container\">\n        <span className=\"theme-icon\">☀️</span>\n        <label className=\"theme-switch\">\n          <input \n            type=\"checkbox\" \n            checked={isDarkTheme}\n            onChange={toggleTheme}\n          />\n          <span className=\"slider\"></span>\n        </label>\n        <span className=\"theme-icon\">🌙</span>\n      </div>\n      \n      <h1 className=\"header\">Card Filter Application</h1>\n      \n      {/* File upload */}\n      <div className=\"card\">\n        <h2>Upload CSV File</h2>\n        <input \n          type=\"file\" \n          accept=\".csv, .txt\" \n          onChange={handleFileUpload} \n          className=\"mb-2\"\n        />\n        {loading && <p>Loading data...</p>}\n        {!loading && data.length > 0 && (\n          <p className=\"text-success\">Loaded {data.length} records.</p>\n        )}\n        {!loading && data.length === 0 && !file && (\n          <p>No data loaded. Please upload a CSV or TXT file.</p>\n        )}\n        \n        <div className=\"form-group\">\n          <label className=\"form-label\">Prefix for card codes:</label>\n          <input\n            type=\"text\"\n            value={prefix}\n            onChange={(e) => setPrefix(e.target.value)}\n            className=\"form-input\"\n            placeholder=\"Enter prefix (e.g. 'kt t1')\"\n          />\n          <p className=\"text-gray-500 text-sm mt-1\">\n            This text will be added before each card code when copying or downloading.\n          </p>\n        </div>\n      </div>\n      \n      {/* Filters */}\n      <div className=\"card\">\n        <h2>Filters</h2>\n        <div className=\"form-group\">\n          <label className=\"form-label\">Series:</label>\n          <input\n            type=\"text\"\n            name=\"series\"\n            value={filters.series}\n            onChange={handleFilterChange}\n            className=\"form-input\"\n            placeholder=\"Enter series name...\"\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label className=\"form-label\">Number:</label>\n          <div className=\"flex gap-2\">\n            <input\n              type=\"number\"\n              name=\"numberFrom\"\n              value={filters.numberFrom}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"From\"\n            />\n            <input\n              type=\"number\"\n              name=\"numberTo\"\n              value={filters.numberTo}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"To\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"form-group\">\n          <label className=\"form-label\">Wishlists:</label>\n          <div className=\"flex gap-2\">\n            <input\n              type=\"number\"\n              name=\"wishlistsFrom\"\n              value={filters.wishlistsFrom}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"From\"\n            />\n            <input\n              type=\"number\"\n              name=\"wishlistsTo\"\n              value={filters.wishlistsTo}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"To\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"form-group\">\n          <label className=\"form-label\">Tag:</label>\n          <div className=\"flex gap-2\">\n            <input\n              type=\"text\"\n              name=\"tag\"\n              value={filters.tag}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter tag...\"\n              disabled={filters.noneTag}\n            />\n            <button\n              onClick={() => setFilters({...filters, noneTag: !filters.noneTag, tag: filters.noneTag ? filters.tag : ''})}\n              className={`btn ${filters.noneTag ? 'btn-primary' : 'btn-secondary'}`}\n              title=\"Show only cards with no tag\"\n            >\n              None Tag\n            </button>\n          </div>\n          {filters.noneTag && (\n            <p className=\"text-info\" style={{fontSize: \"0.75rem\", marginTop: \"0.25rem\"}}>\n              Showing only cards with no tag. Tag search is disabled.\n            </p>\n          )}\n        </div>\n        \n        <div className=\"form-group\">\n          <label className=\"form-label\">Editions:</label>\n          <div className=\"flex flex-wrap gap-2\">\n            {getUniqueEditions().map((edition) => (\n              <button\n                key={edition}\n                onClick={() => handleEditionChange(edition)}\n                className={`chip ${\n                  filters.editions.includes(edition)\n                    ? 'chip-blue'\n                    : 'chip-gray'\n                }`}\n              >\n                {edition}\n              </button>\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"form-group\">\n          <div className=\"flex flex-wrap gap-2\">\n            <div className=\"checkbox-container\">\n              <input\n                type=\"checkbox\"\n                id=\"morphed\"\n                name=\"morphed\"\n                checked={filters.morphed}\n                onChange={handleFilterChange}\n                className=\"checkbox\"\n              />\n              <label htmlFor=\"morphed\" className=\"checkbox-label\">\n                Morphed\n              </label>\n            </div>\n            \n            <div className=\"checkbox-container\">\n              <input\n                type=\"checkbox\"\n                id=\"trimmed\"\n                name=\"trimmed\"\n                checked={filters.trimmed}\n                onChange={handleFilterChange}\n                className=\"checkbox\"\n              />\n              <label htmlFor=\"trimmed\" className=\"checkbox-label\">\n                Trimmed\n              </label>\n            </div>\n            \n            <div className=\"checkbox-container\">\n              <input\n                type=\"checkbox\"\n                id=\"frame\"\n                name=\"frame\"\n                checked={filters.frame}\n                onChange={handleFilterChange}\n                className=\"checkbox\"\n              />\n              <label htmlFor=\"frame\" className=\"checkbox-label\">\n                With Frame\n              </label>\n            </div>\n            \n            <div className=\"checkbox-container\">\n              <input\n                type=\"checkbox\"\n                id=\"hasDyeName\"\n                name=\"hasDyeName\"\n                checked={filters.hasDyeName}\n                onChange={handleFilterChange}\n                className=\"checkbox\"\n              />\n              <label htmlFor=\"hasDyeName\" className=\"checkbox-label\">\n                With dye.name\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <button\n            onClick={applyFilters}\n            className=\"btn btn-primary\"\n          >\n            Apply Filters\n          </button>\n          <button\n            onClick={resetFilters}\n            className=\"btn btn-secondary\"\n          >\n            Reset Filters\n          </button>\n        </div>\n      </div>\n      \n      {/* Results section */}\n      <div className=\"card\">\n        <div className=\"flex\" style={{justifyContent: \"space-between\", marginBottom: \"1rem\"}}>\n          <h2>Results {data.length > 0 ? `(${displayData.length}/${filteredData.length})` : \"\"}</h2>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={copyCardCodes}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-success'\n              }`}\n            >\n              {getCopyButtonText()}\n            </button>\n            <button\n              onClick={downloadCardCodes}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-purple'\n              }`}\n            >\n              Download as .txt\n            </button>\n          </div>\n        </div>\n        \n        {/* Results table */}\n        {displayData.length > 0 ? (\n          <div style={{overflowX: \"auto\", maxHeight: \"500px\", overflowY: \"auto\"}}>\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Code</th>\n                  <th>Number</th>\n                  <th>Edition</th>\n                  <th>Character</th>\n                  <th>Series</th>\n                  <th>Quality</th>\n                  <th>Wishlists</th>\n                  <th>Frame</th>\n                  <th>Tag</th>\n                </tr>\n              </thead>\n              <tbody>\n                {getCurrentPageItems().map((card, index) => (\n                  <tr key={index}>\n                    <td style={{color: \"#3b82f6\", fontWeight: 500}}>{card.code}</td>\n                    <td>{card.number}</td>\n                    <td>{card.edition}</td>\n                    <td>{card.character}</td>\n                    <td>{card.series}</td>\n                    <td>{card.quality}</td>\n                    <td>{card.wishlists}</td>\n                    <td>{card.frame || \"—\"}</td>\n                    <td>{card.tag}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <p style={{textAlign: \"center\", padding: \"1rem\"}}>\n            {file ? \"No results matching the filter criteria.\" : \"No data loaded. Please upload a file to see results.\"}\n          </p>\n        )}\n        \n        {displayData.length > 100 && (\n          <p style={{fontSize: \"0.875rem\", marginTop: \"0.5rem\"}}>Showing first 100 of {displayData.length} records.</p>\n        )}\n        \n        {/* Pagination controls */}\n        {displayData.length > 0 && (\n          <div className=\"pagination-container\" style={{marginTop: \"1rem\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", gap: \"0.75rem\"}}>\n            <button \n              onClick={goToFirstPage} \n              disabled={currentPage === 1}\n              className={`btn ${currentPage === 1 ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"First Page\"\n            >\n              &laquo;\n            </button>\n            <button \n              onClick={goToPreviousPage} \n              disabled={currentPage === 1}\n              className={`btn ${currentPage === 1 ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"Previous Page\"\n            >\n              &lsaquo;\n            </button>\n            \n            <div style={{display: \"flex\", alignItems: \"center\", gap: \"0.5rem\"}}>\n              <span>Page</span>\n              <input \n                type=\"number\" \n                min=\"1\" \n                max={totalPages} \n                value={currentPage}\n                onChange={handlePageInput}\n                style={{width: \"50px\", textAlign: \"center\", padding: \"0.25rem\"}}\n                className=\"form-input\"\n              />\n              <span>of {totalPages}</span>\n            </div>\n            \n            <button \n              onClick={goToNextPage} \n              disabled={currentPage === totalPages}\n              className={`btn ${currentPage === totalPages ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"Next Page\"\n            >\n              &rsaquo;\n            </button>\n            <button \n              onClick={goToLastPage} \n              disabled={currentPage === totalPages}\n              className={`btn ${currentPage === totalPages ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"Last Page\"\n            >\n              &raquo;\n            </button>\n            \n            <div style={{marginLeft: \"1rem\", display: \"flex\", alignItems: \"center\", gap: \"0.5rem\"}}>\n              <span>Show</span>\n              <select \n                value={itemsPerPage} \n                onChange={handleItemsPerPageChange}\n                className=\"form-input\"\n                style={{padding: \"0.25rem\"}}\n              >\n                <option value=\"5\">5</option>\n                <option value=\"10\">10</option>\n                <option value=\"25\">25</option>\n                <option value=\"50\">50</option>\n                <option value=\"100\">100</option>\n              </select>\n              <span>per page</span>\n            </div>\n          </div>\n        )}\n        \n        {filteredData.length !== displayData.length && (\n          <p style={{fontSize: \"0.875rem\", marginTop: \"0.5rem\", color: \"#3b82f6\"}}>\n            Displaying only {displayData.length} of {filteredData.length} records (remaining have already been copied).\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CardFilterApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}