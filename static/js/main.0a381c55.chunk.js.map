{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CardFilterApp","file","setFile","useState","data","setData","filteredData","setFilteredData","displayData","setDisplayData","loading","setLoading","copyBatch","setCopyBatch","singleCopyIndex","setSingleCopyIndex","copiedAll","setCopiedAll","singleCopiedAll","setSingleCopiedAll","prefix","setPrefix","isDarkTheme","setIsDarkTheme","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","sortField","setSortField","sortDirection","setSortDirection","filters","setFilters","series","numberFrom","numberTo","wishlistsFrom","wishlistsTo","editions","morphed","trimmed","frame","hasDyeName","tag","noneTag","blacklistSeries","blacklistCharacter","blacklistTag","excludeFrame","excludeMorphed","excludeTrimmed","excludeDyeName","totalPages","Math","ceil","length","handleSort","field","useEffect","document","title","savedTheme","localStorage","getItem","applyTheme","dark","body","classList","add","remove","readFileContent","Promise","resolve","reject","reader","FileReader","onload","event","target","result","onerror","error","readAsText","applyFilters","results","includedSeries","toLowerCase","split","map","s","trim","filter","card","cardSeries","some","includes","parseInt","number","wishlists","edition","blacklistedSeries","blacklistedCharacters","c","cardCharacter","character","blacklistedTags","t","cardTag","handleFilterChange","e","name","value","type","checked","_objectSpread","[object Object]","resetFilters","React","createElement","className","onChange","toggleTheme","newTheme","setItem","accept","async","uploadedFile","files","content","Papa","parse","header","complete","console","placeholder","style","fontSize","marginTop","disabled","onClick","concat","Set","sort","a","b","key","newEditions","index","indexOf","splice","push","handleEditionChange","id","htmlFor","justifyContent","marginBottom","copyCardCodes","totalBatches","startIndex","endIndex","min","cardsToCopy","slice","codes","code","join","navigator","clipboard","writeText","alert","newDisplayData","copiedCard","getCopyButtonText","copyCardCodesOneLine","cardToCopy","downloadCardCodes","i","batch","blob","Blob","url","URL","createObjectURL","href","download","appendChild","click","removeChild","revokeObjectURL","downloadCardCodesOneLine","overflowX","maxHeight","overflowY","getCurrentPageItems","sortedData","aVal","bVal","localeCompare","getSortedData","color","fontWeight","quality","textAlign","padding","display","alignItems","gap","goToFirstPage","goToPreviousPage","prev","max","isNaN","width","goToNextPage","goToLastPage","marginLeft","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.0a381c55.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport './styles.css';\n\nconst CardFilterApp = () => {\n  const [file, setFile] = useState(null);\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [displayData, setDisplayData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [copyBatch, setCopyBatch] = useState(0);\n  const [singleCopyIndex, setSingleCopyIndex] = useState(0);\n  const [copiedAll, setCopiedAll] = useState(false);\n  const [singleCopiedAll, setSingleCopiedAll] = useState(false);\n  const [prefix, setPrefix] = useState('');\n  const [isDarkTheme, setIsDarkTheme] = useState(true); // Default to dark theme\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10); // Default 10 items per page\n  const [sortField, setSortField] = useState(null);\n  const [sortDirection, setSortDirection] = useState('asc');\n  const [filters, setFilters] = useState({\n    series: '',\n    numberFrom: '',\n    numberTo: '',\n    wishlistsFrom: '',\n    wishlistsTo: '',\n    editions: [],\n    morphed: false,\n    trimmed: false,\n    frame: false,\n    hasDyeName: false,\n    tag: '',\n    noneTag: false,\n    // Blacklist filters\n    blacklistSeries: '',\n    blacklistCharacter: '',\n    blacklistTag: '',\n    excludeFrame: false,\n    excludeMorphed: false,\n    excludeTrimmed: false,\n    excludeDyeName: false\n  });\n  \n  // Calculate the total number of pages\n  const totalPages = Math.ceil(displayData.length / itemsPerPage);\n  \n  // Sort function\n  const handleSort = (field) => {\n    // If clicking the same field, toggle direction or reset\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else {\n        // Reset sorting\n        setSortField(null);\n        setSortDirection('asc');\n      }\n    } else {\n      // New field, start with ascending\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n  \n  // Apply sorting to data\n  const getSortedData = (data) => {\n    if (!sortField) return data;\n    \n    const sortedData = [...data];\n    \n    sortedData.sort((a, b) => {\n      // Handle numeric fields\n      if (['number', 'wishlists', 'edition', 'worker.effort'].includes(sortField)) {\n        const aVal = parseInt(a[sortField]) || 0;\n        const bVal = parseInt(b[sortField]) || 0;\n        \n        return sortDirection === 'asc' ? aVal - bVal : bVal - aVal;\n      }\n      \n      // Handle string fields\n      const aVal = a[sortField] || '';\n      const bVal = b[sortField] || '';\n      \n      if (sortDirection === 'asc') {\n        return aVal.localeCompare(bVal);\n      } else {\n        return bVal.localeCompare(aVal);\n      }\n    });\n    \n    return sortedData;\n  };\n  \n  // Get current page items\n  const getCurrentPageItems = () => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    const sortedData = getSortedData(displayData);\n    return sortedData.slice(startIndex, endIndex);\n  };\n  \n  // Pagination controls\n  const goToFirstPage = () => setCurrentPage(1);\n  const goToPreviousPage = () => setCurrentPage(prev => Math.max(prev - 1, 1));\n  const goToNextPage = () => setCurrentPage(prev => Math.min(prev + 1, totalPages));\n  const goToLastPage = () => setCurrentPage(totalPages);\n  \n  // Handle direct page input\n  const handlePageInput = (e) => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value >= 1 && value <= totalPages) {\n      setCurrentPage(value);\n    }\n  };\n  \n  // Handle items per page change\n  const handleItemsPerPageChange = (e) => {\n    const value = parseInt(e.target.value);\n    setItemsPerPage(value);\n    setCurrentPage(1); // Reset to first page when changing items per page\n  };\n  \n  // Set document title\n  useEffect(() => {\n    document.title = \"Karuta Cards Tool\";\n  }, []);\n  \n  // Theme toggle effect\n  useEffect(() => {\n    // Check if theme preference exists in localStorage\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setIsDarkTheme(savedTheme === 'dark');\n    }\n    \n    // Apply theme class to document\n    applyTheme(savedTheme === 'dark' || (savedTheme === null && isDarkTheme));\n  }, []);\n  \n  // Function to apply the theme\n  const applyTheme = (dark) => {\n    if (dark) {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    }\n  };\n  \n  // Function to toggle theme\n  const toggleTheme = () => {\n    const newTheme = !isDarkTheme;\n    setIsDarkTheme(newTheme);\n    applyTheme(newTheme);\n    localStorage.setItem('theme', newTheme ? 'dark' : 'light');\n  };\n  \n  // Handle file upload\n  const handleFileUpload = async (event) => {\n    const uploadedFile = event.target.files[0];\n    setFile(uploadedFile);\n    \n    if (uploadedFile) {\n      setLoading(true);\n      const content = await readFileContent(uploadedFile);\n      \n      Papa.parse(content, {\n        header: true,\n        complete: (results) => {\n          setData(results.data);\n          setFilteredData(results.data);\n          setDisplayData(results.data);\n          setLoading(false);\n        },\n        error: (error) => {\n          console.error('Error parsing CSV:', error);\n          setLoading(false);\n        }\n      });\n    }\n  };\n  \n  // Read file content\n  const readFileContent = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = (error) => reject(error);\n      reader.readAsText(file);\n    });\n  };\n  \n  // Initialize empty state - no automatic data loading\n  useEffect(() => {\n    // Only process data if a file has been selected by the user\n    if (file) {\n      const processCSVData = (csvText) => {\n        Papa.parse(csvText, {\n          header: true,\n          complete: (results) => {\n            setData(results.data);\n            setFilteredData(results.data);\n            setDisplayData(results.data);\n          },\n          error: (error) => {\n            console.error('Error parsing CSV:', error);\n          }\n        });\n      };\n      \n      // If needed in the future, process file data here\n    } else {\n      // Reset data states when no file is loaded\n      setData([]);\n      setFilteredData([]);\n      setDisplayData([]);\n    }\n  }, [file]);\n  \n  // Apply filters function\n  const applyFilters = () => {\n    let results = [...data];\n    \n    // Filter by series\n    if (filters.series) {\n      // Allow multiple series names separated by commas\n      const includedSeries = filters.series.toLowerCase().split(',').map(s => s.trim());\n      results = results.filter(card => {\n        const cardSeries = card.series.toLowerCase();\n        return includedSeries.some(series => cardSeries.includes(series));\n      });\n    }\n    \n    // Filter by number range\n    if (filters.numberFrom) {\n      results = results.filter(card => \n        parseInt(card.number) >= parseInt(filters.numberFrom)\n      );\n    }\n    \n    if (filters.numberTo) {\n      results = results.filter(card => \n        parseInt(card.number) <= parseInt(filters.numberTo)\n      );\n    }\n    \n    // Filter by wishlists range\n    if (filters.wishlistsFrom) {\n      results = results.filter(card => \n        parseInt(card.wishlists) >= parseInt(filters.wishlistsFrom)\n      );\n    }\n    \n    if (filters.wishlistsTo) {\n      results = results.filter(card => \n        parseInt(card.wishlists) <= parseInt(filters.wishlistsTo)\n      );\n    }\n    \n    // Filter by editions\n    if (filters.editions.length > 0) {\n      results = results.filter(card => \n        filters.editions.includes(card.edition)\n      );\n    }\n    \n    // Filter by morphed\n    if (filters.morphed) {\n      results = results.filter(card => card.morphed === \"Yes\");\n    }\n    \n    // Filter by trimmed\n    if (filters.trimmed) {\n      results = results.filter(card => card.trimmed === \"Yes\");\n    }\n    \n    // Filter by frame\n    if (filters.frame) {\n      results = results.filter(card => card.frame !== \"\");\n    }\n    \n    // Filter by dye.name\n    if (filters.hasDyeName) {\n      results = results.filter(card => card[\"dye.name\"] !== \"\");\n    }\n    \n    // Filter by tag\n    if (filters.tag) {\n      results = results.filter(card => \n        card.tag.toLowerCase().includes(filters.tag.toLowerCase())\n      );\n    }\n    \n    // Filter for cards with no tag\n    if (filters.noneTag) {\n      results = results.filter(card => \n        !card.tag || card.tag.trim() === ''\n      );\n    }\n    \n    // Apply blacklist filters\n    \n    // Blacklist series filter\n    if (filters.blacklistSeries) {\n      // Allow multiple series names separated by commas\n      const blacklistedSeries = filters.blacklistSeries.toLowerCase().split(',').map(s => s.trim());\n      results = results.filter(card => {\n        const cardSeries = card.series.toLowerCase();\n        return !blacklistedSeries.some(series => cardSeries.includes(series));\n      });\n    }\n    \n    // Blacklist character filter\n    if (filters.blacklistCharacter) {\n      // Allow multiple character names separated by commas\n      const blacklistedCharacters = filters.blacklistCharacter.toLowerCase().split(',').map(c => c.trim());\n      results = results.filter(card => {\n        const cardCharacter = card.character.toLowerCase();\n        return !blacklistedCharacters.some(character => cardCharacter.includes(character));\n      });\n    }\n    \n    // Blacklist tag filter\n    if (filters.blacklistTag) {\n      // Allow multiple tags separated by commas\n      const blacklistedTags = filters.blacklistTag.toLowerCase().split(',').map(t => t.trim());\n      results = results.filter(card => {\n        const cardTag = (card.tag || '').toLowerCase();\n        return !blacklistedTags.some(tag => cardTag.includes(tag));\n      });\n    }\n    \n    // Exclude cards with frame\n    if (filters.excludeFrame) {\n      results = results.filter(card => !card.frame || card.frame.trim() === '');\n    }\n    \n    // Exclude morphed cards\n    if (filters.excludeMorphed) {\n      results = results.filter(card => card.morphed !== \"Yes\");\n    }\n    \n    // Exclude trimmed cards\n    if (filters.excludeTrimmed) {\n      results = results.filter(card => card.trimmed !== \"Yes\");\n    }\n    \n    // Exclude cards with dye.name\n    if (filters.excludeDyeName) {\n      results = results.filter(card => !card[\"dye.name\"] || card[\"dye.name\"].trim() === '');\n    }\n    \n    setFilteredData(results);\n    setDisplayData(results);\n    // Reset pagination when filters change\n    setCurrentPage(1);\n    // Reset copy batch when filters change\n    setCopyBatch(0);\n    setCopiedAll(false);\n  };\n  \n  // Handle filter changes - back to manual filtering\n  const handleFilterChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    \n    setFilters({\n      ...filters,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n  \n  // Handle edition selection - back to manual filtering\n  const handleEditionChange = (edition) => {\n    const newEditions = [...filters.editions];\n    \n    if (newEditions.includes(edition)) {\n      const index = newEditions.indexOf(edition);\n      newEditions.splice(index, 1);\n    } else {\n      newEditions.push(edition);\n    }\n    \n    setFilters({\n      ...filters,\n      editions: newEditions\n    });\n  };\n  \n  // Reset filters\n  const resetFilters = () => {\n    setFilters({\n      series: '',\n      numberFrom: '',\n      numberTo: '',\n      wishlistsFrom: '',\n      wishlistsTo: '',\n      editions: [],\n      morphed: false,\n      trimmed: false,\n      frame: false,\n      hasDyeName: false,\n      tag: '',\n      noneTag: false,\n      // Reset blacklist filters\n      blacklistSeries: '',\n      blacklistCharacter: '',\n      blacklistTag: '',\n      excludeFrame: false,\n      excludeMorphed: false,\n      excludeTrimmed: false,\n      excludeDyeName: false\n    });\n    \n    // Reset sorting\n    setSortField(null);\n    setSortDirection('asc');\n    \n    setFilteredData(data);\n    setDisplayData(data);\n    setCopyBatch(0);\n    setCopiedAll(false);\n    setSingleCopyIndex(0);\n    setSingleCopiedAll(false);\n  };\n  \n  // Copy card codes to clipboard - updated to handle batches and remove copied cards\n  const copyCardCodes = () => {\n    const batchSize = 50;\n    const totalBatches = Math.ceil(filteredData.length / batchSize);\n    \n    // If we've copied all batches, reset to beginning and restore display\n    if (copyBatch >= totalBatches || copiedAll) {\n      setCopyBatch(0);\n      setCopiedAll(false);\n      setDisplayData([...filteredData]);\n      return;\n    }\n    \n    const startIndex = copyBatch * batchSize;\n    const endIndex = Math.min(startIndex + batchSize, filteredData.length);\n    const cardsToCopy = filteredData.slice(startIndex, endIndex);\n    \n    // Add prefix if it exists\n    let codes;\n    if (prefix.trim()) {\n      codes = cardsToCopy.map(card => `${prefix} ${card.code}`).join(', ');\n    } else {\n      codes = cardsToCopy.map(card => card.code).join(', ');\n    }\n    \n    navigator.clipboard.writeText(codes);\n    alert(`Copied codes ${startIndex+1}-${endIndex} of ${filteredData.length}`)\n    \n    // Remove copied cards from display\n    const newDisplayData = displayData.filter(card => \n      !cardsToCopy.some(copiedCard => copiedCard.code === card.code)\n    );\n    \n    setDisplayData(newDisplayData);\n    \n    // Move to next batch\n    setCopyBatch(copyBatch + 1);\n    \n    // If we've copied all, mark as completed\n    if (endIndex >= filteredData.length) {\n      setCopiedAll(true);\n    }\n  };\n\n  // Copy card codes to clipboard (one card at a time)\n  const copyCardCodesOneLine = () => {\n    // If we've copied all cards, reset to beginning and restore display\n    if (filteredData.length === 0 || singleCopyIndex >= filteredData.length || singleCopiedAll) {\n      setSingleCopyIndex(0);\n      setSingleCopiedAll(false);\n      setDisplayData([...filteredData]);\n      return;\n    }\n    \n    // Get the single card to copy\n    const cardToCopy = filteredData[singleCopyIndex];\n    \n    // Add prefix if it exists, for a single code\n    let code;\n    if (prefix.trim()) {\n      code = `${prefix} ${cardToCopy.code}`;\n    } else {\n      code = cardToCopy.code;\n    }\n    \n    navigator.clipboard.writeText(code);\n    alert(`Copied code ${singleCopyIndex+1} of ${filteredData.length}: ${cardToCopy.code}`);\n    \n    // Remove only this copied card from display\n    const newDisplayData = displayData.filter(card => card.code !== cardToCopy.code);\n    setDisplayData(newDisplayData);\n    \n    // Move to next card\n    setSingleCopyIndex(singleCopyIndex + 1);\n    \n    // If we've copied all, mark as completed\n    if (singleCopyIndex + 1 >= filteredData.length) {\n      setSingleCopiedAll(true);\n    }\n  };\n  \n  // Download card codes as text file\n  const downloadCardCodes = () => {\n    const maxCodesPerLine = 50;\n    let content = '';\n    \n    for (let i = 0; i < filteredData.length; i += maxCodesPerLine) {\n      const batch = filteredData.slice(i, i + maxCodesPerLine);\n      \n      // Add prefix if it exists\n      if (prefix.trim()) {\n        content += prefix + ' ' + batch.map(card => card.code).join(', ') + '\\n';\n      } else {\n        content += batch.map(card => card.code).join(', ') + '\\n';\n      }\n    }\n    \n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'card_codes.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // Download card codes as text file (one per line)\n  const downloadCardCodesOneLine = () => {\n    let content = '';\n    \n    // Add prefix if it exists, one code per line\n    if (prefix.trim()) {\n      content = filteredData.map(card => `${prefix} ${card.code}`).join('\\n');\n    } else {\n      content = filteredData.map(card => card.code).join('\\n');\n    }\n    \n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'card_codes_one_per_line.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  \n  // Get unique editions\n  const getUniqueEditions = () => {\n    if (data.length === 0) return [];\n    \n    const editions = [...new Set(data.map(card => card.edition))];\n    return editions.sort((a, b) => parseInt(a) - parseInt(b));\n  };\n  \n  // Get copy button text\n  const getCopyButtonText = () => {\n    const batchSize = 50;\n    const totalBatches = Math.ceil(filteredData.length / batchSize);\n    \n    if (filteredData.length === 0) {\n      return \"Copy Codes (max 50)\";\n    }\n    \n    // If we've copied all batches or marked as copied all, show that we're starting over\n    if (copyBatch >= totalBatches || copiedAll) {\n      return \"Restore & Start Over\";\n    }\n    \n    const startIndex = copyBatch * batchSize;\n    const endIndex = Math.min(startIndex + batchSize, filteredData.length);\n    \n    return `Copy Codes (${startIndex}/${filteredData.length})`;\n  };\n  \n  // Get single copy button text\n  const getSingleCopyButtonText = () => {\n    if (filteredData.length === 0) {\n      return \"Copy Single Code\";\n    }\n    \n    // If we've copied all cards or marked as single copied all, show that we're starting over\n    if (singleCopyIndex >= filteredData.length || singleCopiedAll) {\n      return \"Restore & Start Over\";\n    }\n    \n    return `Copy Single Code (${singleCopyIndex}/${filteredData.length})`;\n  };\n  \n  return (\n    <div className=\"container\">\n      {/* Theme Toggle Switch */}\n      <div className=\"theme-switch-container\">\n        <span className=\"theme-icon\">☀️</span>\n        <label className=\"theme-switch\">\n          <input \n            type=\"checkbox\" \n            checked={isDarkTheme}\n            onChange={toggleTheme}\n          />\n          <span className=\"slider\"></span>\n        </label>\n        <span className=\"theme-icon\">🌙</span>\n      </div>\n      \n      <h1 className=\"header\">Card Filter Application</h1>\n      \n      {/* File upload */}\n      <div className=\"card\">\n        <h2>Upload CSV File</h2>\n        <input \n          type=\"file\" \n          accept=\".csv, .txt\" \n          onChange={handleFileUpload} \n          className=\"mb-2\"\n        />\n        {loading && <p>Loading data...</p>}\n        {!loading && data.length > 0 && (\n          <p className=\"text-success\">Loaded {data.length} records.</p>\n        )}\n        {!loading && data.length === 0 && !file && (\n          <p>No data loaded. Please upload a CSV or TXT file.</p>\n        )}\n        \n        <div className=\"form-group\">\n          <label className=\"form-label\">Prefix for card codes:</label>\n          <input\n            type=\"text\"\n            value={prefix}\n            onChange={(e) => setPrefix(e.target.value)}\n            className=\"form-input\"\n            placeholder=\"Enter prefix (e.g. 'kt t1')\"\n          />\n          <p className=\"text-gray-500 text-sm mt-1\">\n            This text will be added before each card code when copying or downloading.\n          </p>\n        </div>\n      </div>\n      \n      {/* Filters card */}\n      <div className=\"card\">\n        <h2>Filters</h2>\n        \n        {/* Include filters section */}\n        <div className=\"filter-section\">\n          <h3 className=\"filter-section-title\">Include Filters</h3>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Series:</label>\n            <input\n              type=\"text\"\n              name=\"series\"\n              value={filters.series}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter series names (comma-separated)\"\n            />\n            {filters.series && filters.series.includes(',') && (\n              <p className=\"text-info\" style={{fontSize: \"0.75rem\", marginTop: \"0.25rem\"}}>\n                Including series containing: {filters.series}\n              </p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Number:</label>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"number\"\n                name=\"numberFrom\"\n                value={filters.numberFrom}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"From\"\n              />\n              <input\n                type=\"number\"\n                name=\"numberTo\"\n                value={filters.numberTo}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"To\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Wishlists:</label>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"number\"\n                name=\"wishlistsFrom\"\n                value={filters.wishlistsFrom}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"From\"\n              />\n              <input\n                type=\"number\"\n                name=\"wishlistsTo\"\n                value={filters.wishlistsTo}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"To\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Tag:</label>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                name=\"tag\"\n                value={filters.tag}\n                onChange={handleFilterChange}\n                className=\"form-input\"\n                placeholder=\"Enter tag...\"\n                disabled={filters.noneTag}\n              />\n              <button\n                onClick={() => setFilters({...filters, noneTag: !filters.noneTag, tag: filters.noneTag ? filters.tag : ''})}\n                className={`btn ${filters.noneTag ? 'btn-primary' : 'btn-secondary'}`}\n                title=\"Show only cards with no tag\"\n              >\n                None Tag\n              </button>\n            </div>\n            {filters.noneTag && (\n              <p className=\"text-info\" style={{fontSize: \"0.75rem\", marginTop: \"0.25rem\"}}>\n                Showing only cards with no tag. Tag search is disabled.\n              </p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Editions:</label>\n            <div className=\"flex flex-wrap gap-2\">\n              {getUniqueEditions().map((edition) => (\n                <button\n                  key={edition}\n                  onClick={() => handleEditionChange(edition)}\n                  className={`chip ${\n                    filters.editions.includes(edition)\n                      ? 'chip-blue'\n                      : 'chip-gray'\n                  }`}\n                >\n                  {edition}\n                </button>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"form-group\">\n            <div className=\"flex flex-wrap gap-2\">\n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"morphed\"\n                  name=\"morphed\"\n                  checked={filters.morphed}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"morphed\" className=\"checkbox-label\">\n                  Morphed\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"trimmed\"\n                  name=\"trimmed\"\n                  checked={filters.trimmed}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"trimmed\" className=\"checkbox-label\">\n                  Trimmed\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"frame\"\n                  name=\"frame\"\n                  checked={filters.frame}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"frame\" className=\"checkbox-label\">\n                  With Frame\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"hasDyeName\"\n                  name=\"hasDyeName\"\n                  checked={filters.hasDyeName}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"hasDyeName\" className=\"checkbox-label\">\n                  With dye.name\n                </label>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2\" style={{marginTop: \"1rem\"}}>\n            <button\n              onClick={applyFilters}\n              className=\"btn btn-primary\"\n            >\n              Apply Filters\n            </button>\n            <button\n              onClick={resetFilters}\n              className=\"btn btn-secondary\"\n            >\n              Reset Filters\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"filter-section-divider\"></div>\n        \n        {/* Exclude filters section */}\n        <div className=\"filter-section\">\n          <h3 className=\"filter-section-title\">Exclude Filters (Blacklist)</h3>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Exclude Series:</label>\n            <input\n              type=\"text\"\n              name=\"blacklistSeries\"\n              value={filters.blacklistSeries}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter series to exclude (comma-separated)\"\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Exclude Characters:</label>\n            <input\n              type=\"text\"\n              name=\"blacklistCharacter\"\n              value={filters.blacklistCharacter}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter characters to exclude (comma-separated)\"\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label className=\"form-label\">Exclude Tags:</label>\n            <input\n              type=\"text\"\n              name=\"blacklistTag\"\n              value={filters.blacklistTag}\n              onChange={handleFilterChange}\n              className=\"form-input\"\n              placeholder=\"Enter tags to exclude (comma-separated)\"\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <div className=\"flex flex-wrap gap-2\">\n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"excludeFrame\"\n                  name=\"excludeFrame\"\n                  checked={filters.excludeFrame}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"excludeFrame\" className=\"checkbox-label\">\n                  Exclude Cards with Frame\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"excludeMorphed\"\n                  name=\"excludeMorphed\"\n                  checked={filters.excludeMorphed}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"excludeMorphed\" className=\"checkbox-label\">\n                  Exclude Morphed Cards\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"excludeTrimmed\"\n                  name=\"excludeTrimmed\"\n                  checked={filters.excludeTrimmed}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"excludeTrimmed\" className=\"checkbox-label\">\n                  Exclude Trimmed Cards\n                </label>\n              </div>\n              \n              <div className=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"excludeDyeName\"\n                  name=\"excludeDyeName\"\n                  checked={filters.excludeDyeName}\n                  onChange={handleFilterChange}\n                  className=\"checkbox\"\n                />\n                <label htmlFor=\"excludeDyeName\" className=\"checkbox-label\">\n                  Exclude Cards with dye.name\n                </label>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2\" style={{marginTop: \"1rem\"}}>\n            <button\n              onClick={applyFilters}\n              className=\"btn btn-primary\"\n            >\n              Apply Filters\n            </button>\n            <button\n              onClick={resetFilters}\n              className=\"btn btn-secondary\"\n            >\n              Reset Filters\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Results section */}\n      <div className=\"card\">\n        <div className=\"flex\" style={{justifyContent: \"space-between\", marginBottom: \"1rem\"}}>\n          <h2>Results {data.length > 0 ? `(${displayData.length}/${filteredData.length})` : \"\"}</h2>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={copyCardCodes}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-success'\n              }`}\n              title=\"Copy up to 50 codes separated by commas\"\n            >\n              {getCopyButtonText()}\n            </button>\n            <button\n              onClick={copyCardCodesOneLine}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-success'\n              }`}\n              title=\"Copy a single code at a time\"\n            >\n              {getSingleCopyButtonText()}\n            </button>\n            <button\n              onClick={downloadCardCodes}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-purple'\n              }`}\n              title=\"Download with up to 50 codes per line\"\n            >\n              Download (50 max)\n            </button>\n            <button\n              onClick={downloadCardCodesOneLine}\n              disabled={filteredData.length === 0}\n              className={`btn ${\n                filteredData.length === 0\n                  ? 'btn-secondary'\n                  : 'btn-purple'\n              }`}\n              title=\"Download with one code per line\"\n            >\n              Download (1 per line)\n            </button>\n          </div>\n        </div>\n        \n        {/* Results table */}\n        {displayData.length > 0 ? (\n          <div style={{overflowX: \"auto\", maxHeight: \"500px\", overflowY: \"auto\"}}>\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th onClick={() => handleSort('code')} className=\"sortable-header\">\n                    Code {sortField === 'code' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('number')} className=\"sortable-header\">\n                    Number {sortField === 'number' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('edition')} className=\"sortable-header\">\n                    Edition {sortField === 'edition' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('character')} className=\"sortable-header\">\n                    Character {sortField === 'character' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('series')} className=\"sortable-header\">\n                    Series {sortField === 'series' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('quality')} className=\"sortable-header\">\n                    Quality {sortField === 'quality' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('wishlists')} className=\"sortable-header\">\n                    Wishlists {sortField === 'wishlists' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('worker.effort')} className=\"sortable-header\">\n                    Worker Effort {sortField === 'worker.effort' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('frame')} className=\"sortable-header\">\n                    Frame {sortField === 'frame' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                  <th onClick={() => handleSort('tag')} className=\"sortable-header\">\n                    Tag {sortField === 'tag' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {getCurrentPageItems().map((card, index) => (\n                  <tr key={index}>\n                    <td style={{color: \"#3b82f6\", fontWeight: 500}}>{card.code}</td>\n                    <td>{card.number}</td>\n                    <td>{card.edition}</td>\n                    <td>{card.character}</td>\n                    <td>{card.series}</td>\n                    <td>{card.quality}</td>\n                    <td>{card.wishlists}</td>\n                    <td>{card['worker.effort'] || \"0\"}</td>\n                    <td>{card.frame || \"—\"}</td>\n                    <td>{card.tag}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <p style={{textAlign: \"center\", padding: \"1rem\"}}>\n            {file ? \"No results matching the filter criteria.\" : \"No data loaded. Please upload a file to see results.\"}\n          </p>\n        )}\n        \n        {/* Pagination controls */}\n        {displayData.length > 0 && (\n          <div className=\"pagination-container\" style={{marginTop: \"1rem\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", gap: \"0.75rem\"}}>\n            <button \n              onClick={goToFirstPage} \n              disabled={currentPage === 1}\n              className={`btn ${currentPage === 1 ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"First Page\"\n            >\n              &laquo;\n            </button>\n            <button \n              onClick={goToPreviousPage} \n              disabled={currentPage === 1}\n              className={`btn ${currentPage === 1 ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"Previous Page\"\n            >\n              &lsaquo;\n            </button>\n            \n            <div style={{display: \"flex\", alignItems: \"center\", gap: \"0.5rem\"}}>\n              <span>Page</span>\n              <input \n                type=\"number\" \n                min=\"1\" \n                max={totalPages} \n                value={currentPage}\n                onChange={handlePageInput}\n                style={{width: \"50px\", textAlign: \"center\", padding: \"0.25rem\"}}\n                className=\"form-input\"\n              />\n              <span>of {totalPages}</span>\n            </div>\n            \n            <button \n              onClick={goToNextPage} \n              disabled={currentPage === totalPages}\n              className={`btn ${currentPage === totalPages ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"Next Page\"\n            >\n              &rsaquo;\n            </button>\n            <button \n              onClick={goToLastPage} \n              disabled={currentPage === totalPages}\n              className={`btn ${currentPage === totalPages ? 'btn-secondary' : 'btn-primary'}`}\n              title=\"Last Page\"\n            >\n              &raquo;\n            </button>\n            \n            <div style={{marginLeft: \"1rem\", display: \"flex\", alignItems: \"center\", gap: \"0.5rem\"}}>\n              <span>Show</span>\n              <select \n                value={itemsPerPage} \n                onChange={handleItemsPerPageChange}\n                className=\"form-input\"\n                style={{padding: \"0.25rem\"}}\n              >\n                <option value=\"5\">5</option>\n                <option value=\"10\">10</option>\n                <option value=\"25\">25</option>\n                <option value=\"50\">50</option>\n                <option value=\"100\">100</option>\n              </select>\n              <span>per page</span>\n            </div>\n          </div>\n        )}\n        \n        {filteredData.length !== displayData.length && (\n          <p style={{fontSize: \"0.875rem\", marginTop: \"0.5rem\", color: \"#3b82f6\"}}>\n            Displaying only {displayData.length} of {filteredData.length} records (remaining have already been copied).\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CardFilterApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}